# This file contains tests for the buildModule.tcl file.
#
# This file contains a collection of tests for one or more Tcl commands.
# Sourcing this file into Tcl runs the tests and generates output for
# errors.  No output means no errors were found.
#
# Copyright (c) 1998-2000 Ajuba Solutions
# All rights reserved.
#
# RCS: @(#) $Id: buildModule.test,v 1.4 2000/05/31 01:42:06 wart Exp $

package require tcltest
namespace import -force ::tcltest::*

lappend auto_path [file join [file dirname [info script]] ..]
source [file join [file dirname [info script]] ../buildModule.tcl]

# Set up a fake build project

namespace eval ::ModuleHints::ModuleData {
    variable packageName testPackage
    variable wsDir testWsDir
    variable wsName testWsName
    variable buildId testBuildId
    variable prefix testPrefix
    variable exec_prefix execPrefix
    variable build_prefix [file join $::tcltest::temporaryDirectory buildPrefix]
    ::tcltest::makeDirectory $build_prefix
    variable platform testPlatform

    variable MODULE_LIST modA modB modC

    variable topDir
    set topDir(testPackage) [file join $::tcltest::temporaryDirectory testPackage]
    set topDir(modA) [file join $::tcltest::temporaryDirectory topModA]
    set topDir(modB) [file join $::tcltest::temporaryDirectory topModB]
    set topDir(modC) [file join $::tcltest::temporaryDirectory topModC]

    variable moduleDep
    set moduleDep(modB) modA
    set moduleDep(modC) modB

    # This is so that we can stub out the exec calls.  All we really care
    # about is the return result.
    variable execResult
    variable execCount
}

::tcltest::makeDirectory [file join $::tcltest::temporaryDirectory testPackage]
::tcltest::makeDirectory [file join $::tcltest::temporaryDirectory topModA]
::tcltest::makeDirectory [file join $::tcltest::temporaryDirectory topModB]
::tcltest::makeDirectory [file join $::tcltest::temporaryDirectory topModC]

# Clobber the old definition of this function.  We don't want to actually
# execute anything.  Tests should explicitly set
# ::ModuleHints::ModuleData::execResult to be the desired return value.
# We use an array so that we can set the result to be different if
# the procedure is called more than once.

proc ModuleHints::execViaPipe {args} {
    set result $::ModuleHints::ModuleData::execResult($::ModuleHints::ModuleData::execCount)
    incr ::ModuleHints::ModuleData::execCount

    return $result
}

# Test groups:
#	1.x	BuildModule::BuildModule
#	2.x	BuildModule::ConfigureModule
#	3.x	BuildModule::ConfigureAndBuildModule
#	4.x	BuildModule::TestModule
#	5.x	BuildModule::UpdateModule

test BuildModule-1.1 {BuildModule::BuildModule, attempt to build master module} {
    set result [BuildModule::BuildModule testPackage Release all]

    set result
} {1}

test BuildModule-1.2 {BuildModule::BuildModule, module doesn't exist} {
    set result [BuildModule::BuildModule modNULL Release all]
} {0}

test BuildModule-1.3 {BuildModule::BuildModule, build dir doesn't exist} {
    set result [BuildModule::BuildModule modA Release all]
} {0}

test BuildModule-1.4 {BuildModule::BuildModule, exec succeeds} {
    set ::ModuleHints::ModuleData::execCount 0
    set ::ModuleHints::ModuleData::execResult(0) 1

    ::tcltest::makeDirectory [file join $::tcltest::temporaryDirectory \
	    buildPrefix modA]

    set result [BuildModule::BuildModule modA Release all]

    # BuildModule leaves you in the build directory after the build
    # is done.  We are about to remove that directory, so let's get
    # out of it first.
    cd $::tcltest::temporaryDirectory

    ::tcltest::removeDirectory [file join $::tcltest::temporaryDirectory \
	    buildPrefix modA]

    set result
} {1}

test BuildModule-1.5 {BuildModule::BuildModule, exec fails} {
    set ::ModuleHints::ModuleData::execCount 0
    set ::ModuleHints::ModuleData::execResult(0) 0

    ::tcltest::makeDirectory [file join $::tcltest::temporaryDirectory \
	    buildPrefix modA]

    set result [BuildModule::BuildModule modA Release all]

    # BuildModule leaves you in the build directory after the build
    # is done.  We are about to remove that directory, so let's get
    # out of it first.
    cd $::tcltest::temporaryDirectory

    ::tcltest::removeDirectory [file join $::tcltest::temporaryDirectory \
	    buildPrefix modA]

    set result
} {0}

test BuildModule-2.1 {BuildModule::ConfigureModule, attempt to configure master module} {
    set result [BuildModule::ConfigureModule testPackage Release null]

    set result
} {1}

test BuildModule-2.2 {BuildModule::ConfigureModule, module doesn't exist} {
    set result [BuildModule::ConfigureModule modNULL Release all]
} {0}

test BuildModule-2.3 {BuildModule::ConfigureModule, configure fails} {
    set ::ModuleHints::ModuleData::execCount 0
    set ::ModuleHints::ModuleData::execResult(0) 0

    ::tcltest::makeFile {
dnl foo!
    } [file join $::tcltest::temporaryDirectory/topModA configure]

    set result [BuildModule::ConfigureModule modA Release all]
    cd $::tcltest::temporaryDirectory

    ::tcltest::removeFile \
	    [file join $::tcltest::temporaryDirectory/topModA configure]

    set result

} {0}

test BuildModule-2.4 {BuildModule::ConfigureModule, configure succeeds} {
    set ::ModuleHints::ModuleData::execCount 0
    set ::ModuleHints::ModuleData::execResult(0) 1

    ::tcltest::makeFile {
dnl foo!
    } [file join $::tcltest::temporaryDirectory/topModA configure]

    set result [BuildModule::ConfigureModule modA Release all]
    cd $::tcltest::temporaryDirectory

    ::tcltest::removeFile \
	    [file join $::tcltest::temporaryDirectory/topModA configure]

    set result

} {1}

test BuildModule-3.1 {BuildModule::ConfigureAndBuildModule, configure succeeds, build succeeds} {
    set ::ModuleHints::ModuleData::execCount 0
    set ::ModuleHints::ModuleData::execResult(0) 1
    set ::ModuleHints::ModuleData::execResult(1) 1

    ::tcltest::makeFile {
dnl foo!
    } [file join $::tcltest::temporaryDirectory/topModA configure]

    set result [BuildModule::ConfigureAndBuildModule modA Release all]
    cd $::tcltest::temporaryDirectory

    ::tcltest::removeFile \
	    [file join $::tcltest::temporaryDirectory/topModA configure]

    set result

} {1}

test BuildModule-3.2 {BuildModule::ConfigureAndBuildModule, configure fails, build fails} {
    set ::ModuleHints::ModuleData::execCount 0
    set ::ModuleHints::ModuleData::execResult(0) 0
    set ::ModuleHints::ModuleData::execResult(1) 0

    ::tcltest::makeFile {
dnl foo!
    } [file join $::tcltest::temporaryDirectory/topModA configure]

    set result [BuildModule::ConfigureAndBuildModule modA Release all]
    cd $::tcltest::temporaryDirectory

    ::tcltest::removeFile \
	    [file join $::tcltest::temporaryDirectory/topModA configure]

    set result

} {0}

test BuildModule-3.3 {BuildModule::ConfigureAndBuildModule, configure succeeds, build fails} {
    set ::ModuleHints::ModuleData::execCount 0
    set ::ModuleHints::ModuleData::execResult(0) 1
    set ::ModuleHints::ModuleData::execResult(1) 0

    ::tcltest::makeFile {
dnl foo!
    } [file join $::tcltest::temporaryDirectory/topModA configure]

    set result [BuildModule::ConfigureAndBuildModule modA Release all]
    cd $::tcltest::temporaryDirectory

    ::tcltest::removeFile \
	    [file join $::tcltest::temporaryDirectory/topModA configure]

    set result

} {0}

test BuildModule-3.4 {BuildModule::ConfigureAndBuildModule, configure fails, build succeeds} {
    set ::ModuleHints::ModuleData::execCount 0
    set ::ModuleHints::ModuleData::execResult(0) 0
    set ::ModuleHints::ModuleData::execResult(1) 1

    ::tcltest::makeFile {
dnl foo!
    } [file join $::tcltest::temporaryDirectory/topModA configure]

    set result [BuildModule::ConfigureAndBuildModule modA Release all]
    cd $::tcltest::temporaryDirectory

    ::tcltest::removeFile \
	    [file join $::tcltest::temporaryDirectory/topModA configure]

    set result

} {0}

test BuildModule-4.1 {BuildModule::TestModule, attempt to test master module} {
    set result [BuildModule::TestModule testPackage Release null]
} {1}

test BuildModule-4.2 {BuildModule::TestModule, module doesn't exist} {
    set result [BuildModule::TestModule modNULL Release null]
} {0}

test BuildModule-4.3 {BuildModule::TestModule, tests fail} {
    set ::ModuleHints::ModuleData::execCount 0
    set ::ModuleHints::ModuleData::execResult(0) 0

    set result [BuildModule::TestModule modA Release all]
    cd $::tcltest::temporaryDirectory

    set result

} {0}

test BuildModule-4.4 {BuildModule::TestModule, tests pass} {
    set ::ModuleHints::ModuleData::execCount 0
    set ::ModuleHints::ModuleData::execResult(0) 1

    set result [BuildModule::TestModule modA Release all]
    cd $::tcltest::temporaryDirectory

    set result

} {1}

test BuildModule-5.1 {BuildModule::UpdateModule, attempt to update master module} {
    set ::ModuleHints::ModuleData::execCount 0
    set ::ModuleHints::ModuleData::execResult(0) 1

    set result [BuildModule::UpdateModule testPackage Release null]
} {1}

test BuildModule-5.2 {BuildModule::UpdateModule, module doesn't exist} {
    set result [BuildModule::UpdateModule modNULL Release null]
} {0}

test BuildModule-5.3 {BuildModule::UpdateModule, update fails} {
    set ::ModuleHints::ModuleData::execCount 0
    set ::ModuleHints::ModuleData::execResult(0) 0

    set result [BuildModule::UpdateModule modA Release all]
    cd $::tcltest::temporaryDirectory

    set result

} {0}

test BuildModule-5.4 {BuildModule::UpdateModule, update passes} {
    set ::ModuleHints::ModuleData::execCount 0
    set ::ModuleHints::ModuleData::execResult(0) 1

    set result [BuildModule::UpdateModule modA Release all]
    cd $::tcltest::temporaryDirectory

    set result

} {1}

::tcltest::cleanupTests

return
