# Makefile.in --
#
#	This makes the wrapper library, which is a thin layer on
#	top of an unzip library.  The unzip library must be built
#	first (using its special Makefiles, etc.) and we bundle
#	those objects into the wrapper library.
#
# Copyright (c) 1998-2000 Ajuba Solutions
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: Makefile.in,v 1.20 2000/08/24 22:02:16 welch Exp $


lib_BINARIES=$(wrapper_LIB_FILE)
BINARIES=$(bin_BINARIES) $(lib_BINARIES)

wrapper_SOURCES =  wrapper.c proInit.c proWrapTclMain.c proWrapTkMain.c \
	tclMemChan.c proWrap.c
SOURCES = $(wrapper_SOURCES)

wrapper_LIB_OBJECTS=wrapper.$(OBJEXT) \
	proInit.$(OBJEXT) \
	proWrapTclMain.$(OBJEXT) \
	proWrapTkMain.$(OBJEXT) \
	tclMemChan.$(OBJEXT) \
	proWrap.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/unzip.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/crc32.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/crctab.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/crypt.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/envargs.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/explode.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/extract.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/fileio.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/globals.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/inflate.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/list.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/match.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/process.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/ttyio.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/unreduce.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/unshrink.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/zipinfo.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/api.$(OBJEXT) \
	$(UNZIP_BUILD_DIR)/apihelp.$(OBJEXT) \
	$(UNZIP_SYSTEM_OBJS)

OBJECTS = $(wrapper_LIB_OBJECTS)

#========================================================================
# The substitution of "wrapper_LIB_FILE" into the variable name below
# allows us to refer to the objects for the library without knowing the name
# of the library in advance.  It also lets us use the "$@" variable in
# the rule for building the library, so we can refer to both the list of 
# objects and the library itself in a platform-independent manner.
#========================================================================

wrapper_LIB_FILE = @wrapper_LIB_FILE@
$(wrapper_LIB_FILE)_OBJECTS = $(OBJECTS)

#========================================================================
# This is a list of header files to be installed
#========================================================================

GENERIC_HDRS= $(srcdir)/hdr/proWrap.h

#========================================================================
# Nothing of the variables below this line need to be changed.  Please
# check the TARGETS section below to make sure the make targets are
# correct.
#========================================================================

SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/@PACKAGE@@VERSION@
pkglibdir = $(libdir)/@PACKAGE@@VERSION@
pkgincludedir = $(includedir)/@PACKAGE@@VERSION@

top_builddir = .

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_FLAG =
transform = @program_transform_name@

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :

PACKAGE = @PACKAGE@
VERSION = @VERSION@
CC = @CC@
CC = @CC@
CFLAGS_DEBUG = @CFLAGS_DEBUG@
CFLAGS_DEFAULT = @CFLAGS_DEFAULT@
CFLAGS_OPTIMIZE = @CFLAGS_OPTIMIZE@
CLEANFILES = @CLEANFILES@
EXEEXT = @EXEEXT@
LDFLAGS_DEBUG = @LDFLAGS_DEBUG@
LDFLAGS_DEFAULT = @LDFLAGS_DEFAULT@
LDFLAGS_OPTIMIZE = @LDFLAGS_OPTIMIZE@
MAKE_LIB = @MAKE_LIB@
MAKE_SHARED_LIB = @MAKE_SHARED_LIB@
MAKE_STATIC_LIB = @MAKE_STATIC_LIB@
OBJEXT = @OBJEXT@
RANLIB = @RANLIB@
SHLIB_CFLAGS = @SHLIB_CFLAGS@
SHLIB_LD = @SHLIB_LD@
SHLIB_LDFLAGS = @SHLIB_LDFLAGS@
SHLIB_LD_LIBS = @SHLIB_LD_LIBS@
STLIB_LD = @STLIB_LD@
TCL_BIN_DIR = @TCL_BIN_DIR@
TCL_DEFS = @TCL_DEFS@
TCL_EXTRA_CFLAGS = @TCL_EXTRA_CFLAGS@
TCL_LD_FLAGS = @TCL_LD_FLAGS@
TCL_LIBS = @TCL_LIBS@
TCL_LIB_SPEC = @TCL_LIB_SPEC@
TCL_SHLIB_LD_LIBS = @TCL_SHLIB_LD_LIBS@
TCL_SRC_DIR = @TCL_SRC_DIR@
TCL_DBGX = @TCL_DBGX@
TCL_STUB_LIB_FILE = @TCL_STUB_LIB_FILE@
TCL_STUB_LIB_SPEC = @TCL_STUB_LIB_SPEC@
TCL_TOOL_DIR_NATIVE = @TCL_TOOL_DIR_NATIVE@
TCL_TOP_DIR_NATIVE = @TCL_TOP_DIR_NATIVE@
TCL_UNIX_DIR_NATIVE = @TCL_UNIX_DIR_NATIVE@
TCL_WIN_DIR_NATIVE = @TCL_WIN_DIR_NATIVE@
INCLUDE_DIR_NATIVE = @INCLUDE_DIR_NATIVE@
TCL_BMAP_DIR_NATIVE = @TCL_BMAP_DIR_NATIVE@
TCL_PLATFORM_DIR_NATIVE = @TCL_PLATFORM_DIR_NATIVE@
TCL_GENERIC_DIR_NATIVE = @TCL_GENERIC_DIR_NATIVE@
TCLSH_PROG = @TCLSH_PROG@
SHARED_BUILD = @SHARED_BUILD@

TK_INCLUDES = @TK_INCLUDES@
TK_LIBS = @TK_LIBS@

TK_VERSION = @TK_VERSION@
TK_DEFS = @TK_DEFS@
TK_LIBS = @TK_LIBS@
TK_EXEC_PREFIX = @TK_EXEC_PREFIX@
TK_XINCLUDES = @TK_XINCLUDES@
TK_XLIBSW = @TK_XLIBSW@
TK_LD_SEARCH_FLAGS = @TK_LD_SEARCH_FLAGS@
TK_BUILD_LIB_SPEC = @TK_BUILD_LIB_SPEC@
TK_LIB_SPEC = @TK_LIB_SPEC@
TK_BUILD_STUB_LIB_SPEC = @TK_BUILD_STUB_LIB_SPEC@
TK_STUB_LIB_SPEC = @TK_STUB_LIB_SPEC@


CYGWIN=@CYGWIN@
PATHTYPE=@PATHTYPE@

AUTOCONF = autoconf

LDFLAGS = $(LDFLAGS_DEFAULT)

WRAPPER_INCLUDE_DIR        = @WRAPPER_INCLUDE_DIR@
WRAPPER_INCLUDE_DIR_NATIVE = @WRAPPER_INCLUDE_DIR_NATIVE@
WRAPPER_INCLUDES           = @WRAPPER_INCLUDES@
SRC_UNZIP_DIR              = @SRC_UNZIP_DIR@
SRC_UNZIP_DIR_NATIVE       = @SRC_UNZIP_DIR_NATIVE@
UNZIP_BUILD_DIR            = @UNZIP_BUILD_DIR@
UNZIP_SYSTEM_OBJS          = @UNZIP_SYSTEM_OBJS@
EXT_INCLUDES		   = @EXT_INCLUDES@
EXT_INCLUDE_DIR		   = @EXT_INCLUDE_DIR@
INCLUDES = @TK_INCLUDES@ @TCL_INCLUDES@ $(WRAPPER_INCLUDES) $(EXT_INCLUDES) -I"$(SRC_UNZIP_DIR_NATIVE)"  $(TK_XINCLUDES)

EXTRA_CFLAGS = $(TCL_DEFS) $(PROTO_FLAGS) $(SECURITY_FLAGS) $(MEM_DEBUG_FLAGS) $(KEYSYM_FLAGS) $(NO_DEPRECATED_FLAGS) $(TCL_EXTRA_CFLAGS)

DEFS = @DEFS@ $(EXTRA_CFLAGS)

ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
CONFIGDIR = @CONFIGDIR@
mkinstalldirs = $(SHELL) $(CONFIGDIR)/mkinstalldirs
CONFIG_CLEAN_FILES = mkIndex.tcl

CPPFLAGS = @CPPFLAGS@
LIBS = @LIBS@
AR = ar
CFLAGS = @CFLAGS@
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = @LINK@ @LINK_FLAGS@ @TCL_LD_FLAGS@ @LINK_OUT_FLAG@$@
TCL_LD_FLAGS = @TCL_LD_FLAGS@

PROCOMP = @PROCOMP@ -nologo
PROWRAP = @PROWRAP@

PW_LIBS=@PW_LIBS@
#========================================================================
# Start of user-definable TARGETS section
#========================================================================

#========================================================================
# TEA TARGETS.  Please note that the "libraries:" target refers to platform
# independent files, and the "binaries:" target inclues executable programs and
# platform-dependent libraries.  Modify these targets so that they install
# the various pieces of your package.  The make and install rules
# for the BINARIES that you specified above have already been done.
#========================================================================

all: binaries libraries doc

#========================================================================
# The binaries target builds executable programs, Windows .dll's, unix
# shared/static libraries, and any other platform-dependent files.
# The list of targets to build for "binaries:" is specified at the top
# of the Makefile, in the "BINARIES" variable.
#========================================================================

binaries: $(BINARIES)

libraries:

doc:

install: all install-binaries install-libraries install-doc

install-binaries: binaries install-lib-binaries install-bin-binaries

#========================================================================
# This rule installs platform-independent files, such as header files.
#========================================================================

install-libraries: libraries
	$(mkinstalldirs) $(includedir)
	@echo "Installing header files in $(includedir)"
	@for i in $(GENERIC_HDRS) ; do \
	    echo "Installing $$i" ; \
	    $(INSTALL_DATA) $$i $(includedir) ; \
	done;


#========================================================================
# Install documentation.  Unix manpages should go in the $(mandir)
# directory.
#========================================================================

install-doc: doc
	$(mkinstalldirs) $(mandir)/man1
	$(mkinstalldirs) $(mandir)/man3
	$(mkinstalldirs) $(mandir)/mann
	@echo "Installing documentation in $(mandir)"
#	@for i in $(srcdir)/*.n; \
#	    do \
#	    echo "Installing $$i"; \
#	    rm -f $(mandir)/mann/$$i; \
#	    $(INSTALL_DATA) $$i $(mandir)/mann ; \
#	    done

test:

depend:

#========================================================================
# We need to enumerate the list of .c to .o lines here.
# Unfortunately, there does not seem to be any other way to do this
# in a Makefile-independent way.  We can't use VPATH because it picks up
# object files that may be located in the source directory.
#
# In the following lines, $(srcdir) refers to the toplevel directory
# containing your extension.  If your sources are in a subdirectory,
# you will have to modify the paths to reflect this:
#
# exampleA.$(OBJEXT): $(srcdir)/src/win/exampleA.c
# 	$(COMPILE) -c `@CYGPATH@ $(srcdir)/src/win/exampleA.c` -o $@
#========================================================================

## C Objects

wrapper.$(OBJEXT): $(srcdir)/src/wrapper.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/src/wrapper.c` -o $@

tclMemChan.$(OBJEXT): $(srcdir)/src/tclMemChan.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/src/tclMemChan.c` -o $@

proInit.$(OBJEXT): $(srcdir)/src/proInit.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/src/proInit.c` -o $@

proWrap.$(OBJEXT): $(srcdir)/src/proWrap.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/src/proWrap.c` -o $@

proWrapTclMain.$(OBJEXT): $(srcdir)/src/proWrapTclMain.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/src/proWrapTclMain.c` -o $@

proWrapTkMain.$(OBJEXT): $(srcdir)/src/proWrapTkMain.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/src/proWrapTkMain.c` -o $@


$(wrapper_LIB_FILE): $(wrapper_LIB_OBJECTS)
	-rm -f $(wrapper_LIB_FILE)
	@MAKE_STATIC_LIB@
	$(RANLIB) $(wrapper_LIB_FILE)

#========================================================================
# End of user-definable section
#========================================================================

#========================================================================
# Don't modify the file to clean here.  Instead, set the "CLEANFILES"
# variable in configure.in
#========================================================================

clean:  
	-test -z "$(BINARIES)" || rm -f $(BINARIES)
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean: clean
	-rm -f *.tab.c
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*
	-rm -f config.status

#========================================================================
# Install binary object libraries.  On Windows this includes both .dll and
# .lib files.  Because the .lib files are not explicitly listed anywhere,
# we need to deduce their existence from the .dll file of the same name.
# Additionally, the .dll files go into the bin directory, but the .lib
# files go into the lib directory.  On Unix platforms, all library files
# go into the lib directory.  In addition, this will generate the pkgIndex.tcl
# file in the install location (assuming it can find a usable tclsh8.2 shell)
#
# You should not have to modify this target.
#========================================================================

install-lib-binaries: installdirs
	@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    ext=`echo $$p|sed -e "s/.*\.//"`; \
	    if test "x$$ext" = "xdll"; then \
	        echo " $(INSTALL_DATA) $$p $(DESTDIR)$(bindir)/$$p"; \
	        $(INSTALL_DATA) $$p $(DESTDIR)$(bindir)/$$p; \
		lib=`basename $$p|sed -e 's/.[^.]*$$//'`.lib; \
		if test -f $$lib; then \
		    echo " $(INSTALL_DATA) $$lib $(DESTDIR)$(libdir)/$$lib"; \
	            $(INSTALL_DATA) $$lib $(DESTDIR)$(libdir)/$$lib; \
		fi; \
	    else \
		echo " $(INSTALL_DATA) $$p $(DESTDIR)$(libdir)/$$p"; \
	        $(INSTALL_DATA) $$p $(DESTDIR)$(libdir)/$$p; \
	    fi; \
	  else :; fi; \
	done
	@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(RANLIB) $(DESTDIR)$(libdir)/$$p"; \
	    $(RANLIB) $(DESTDIR)$(libdir)/$$p; \
	  else :; fi; \
	done

#========================================================================
# Install binary executables (e.g. .exe files)
#
# You should not have to modify this target.
#========================================================================

install-bin-binaries: installdirs
	@list='$(bin_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p"; \
	    $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p; \
	  else :; fi; \
	done

.SUFFIXES: .c .o .obj

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

uninstall-binaries:
	@$(NORMAL_UNINSTALL)
	list='$(BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(libdir)/$$p; \
	done

installdirs:
	$(mkinstalldirs)  $(DESTDIR)$(libdir)
	$(mkinstalldirs)  $(DESTDIR)$(bindir)
	$(mkinstalldirs)  $(DESTDIR)$(pkglibdir)

.PHONY: all binaries clean depend distclean doc install installdirs \
libraries test

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
