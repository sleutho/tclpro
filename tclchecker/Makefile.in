# Makefile.in --
#
#	This file is a Makefile for Sample TEA Extension.  If it has the name
#	"Makefile.in" then it is a template for a Makefile;  to generate the
#	actual Makefile, run "./configure", which is a configuration script
#	generated by the "autoconf" program (constructs like "@foo@" will get
#	replaced in the actual Makefile.
#
# Copyright (c) 1999-2000 Ajuba Solutions
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: Makefile.in,v 1.23 2001/02/26 17:54:36 welch Exp $

#========================================================================
# Edit the following few lines when writing a new extension
#========================================================================

#========================================================================
# Change the name of the variable "checker_LIB_FILE" to match the one
# used in the configure script.  This is the parameterized name of the
# library that we are building.
#========================================================================

lib_BINARIES=
BINARIES=

#========================================================================
# Enumerate the names of the source files included in this package.
# This will be used when a dist target is added to the Makefile.
#========================================================================

checker_SOURCES = 
SOURCES = $(checker_SOURCES)

#========================================================================
# Enumerate the names of the object files included in this package.
# These objects are created and linked into the final library.  In
# most cases these object files will correspond to the source files
# above.
#
#========================================================================

checker_OBJECTS =  
OBJECTS = $(checker_OBJECTS)

#========================================================================
# The substitution of "checker_LIB_FILE" into the variable name below
# allows us to refer to the objects for the library without knowing the name
# of the library in advance.  It also lets us use the "$@" variable in
# the rule for building the library, so we can refer to both the list of 
# objects and the library itself in a platform-independent manner.
#========================================================================

checker_LIB_FILE = 

#========================================================================
# This is a list of header files to be installed
#========================================================================

GENERIC_HDRS= 

PCX_FILES = \
	$(srcdir)/xmlAct.pcx \
	$(srcdir)/xmlGen.pcx \
	$(srcdir)/xmlServer.pcx \
	$(srcdir)/tclDomPro.pcx \
	$(srcdir)/blend.pcx \
	$(srcdir)/oratcl.pcx \
	$(srcdir)/tclCom.pcx

TCL_FILES= \
	$(srcdir)/analyzer.tcl \
	$(srcdir)/blt.tcl \
	$(srcdir)/checker.tcl \
	$(srcdir)/checkerCmdline.tcl \
	$(srcdir)/configure.tcl \
	$(srcdir)/context.tcl \
	$(srcdir)/coreTcl.tcl \
	$(srcdir)/coreTk.tcl \
	$(srcdir)/expect.tcl \
	$(srcdir)/filter.tcl \
	$(srcdir)/incrTcl.tcl \
	$(srcdir)/location.tcl \
	$(srcdir)/message.tcl \
	$(srcdir)/tclDP.tcl \
	$(srcdir)/tclX.tcl \
	$(srcdir)/tkTable.tcl \
	$(srcdir)/userproc.tcl

TBC_FILES= \
	analyzer.tbc \
	blt.tbc \
	checker.tbc \
	checkerCmdline.tbc \
	configure.tbc \
	context.tbc \
	coreTcl.tbc \
	coreTk.tbc \
	expect.tbc \
	filter.tbc \
	incrTcl.tbc \
	location.tbc \
	message.tbc \
	tclDP.tbc \
	tclX.tbc \
	tkTable.tbc \
	userproc.tbc

# Note - configure.in hacked to so LIB_FILES is always TCL_FILES
LIB_FILES=@LIB_FILES@

#========================================================================
# Add additional lines to handle any additional AC_SUBST cases that
# have been added to the configure script.
#========================================================================

SAMPLE_NEW_VAR=@SAMPLE_NEW_VAR@

#========================================================================
# Nothing of the variables below this line need to be changed.  Please
# check the TARGETS section below to make sure the make targets are
# correct.
#========================================================================

SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

TESTDIR = `@CYGPATH@ @srcdir@/tests | tr '\\\\' '/'`

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

DESTDIR =

pkglibdir = $(prefix)/lib/@PACKAGE@@VERSION@

top_builddir = .

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_FLAG =
transform = @program_transform_name@

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :

PACKAGE = @PACKAGE@
VERSION = @VERSION@
CC = @CC@
CFLAGS_DEBUG = @CFLAGS_DEBUG@
CFLAGS_DEFAULT = @CFLAGS_DEFAULT@
CFLAGS_OPTIMIZE = @CFLAGS_OPTIMIZE@
CLEANFILES = @CLEANFILES@
EXEEXT = @EXEEXT@
LDFLAGS_DEBUG = @LDFLAGS_DEBUG@
LDFLAGS_DEFAULT = @LDFLAGS_DEFAULT@
LDFLAGS_OPTIMIZE = @LDFLAGS_OPTIMIZE@
MAKE_LIB = @MAKE_LIB@
MAKE_SHARED_LIB = @MAKE_SHARED_LIB@
MAKE_STATIC_LIB = @MAKE_STATIC_LIB@
OBJEXT = @OBJEXT@
RANLIB = @RANLIB@
SHLIB_CFLAGS = @SHLIB_CFLAGS@
SHLIB_LD = @SHLIB_LD@
SHLIB_LDFLAGS = @SHLIB_LDFLAGS@
SHLIB_LD_LIBS = @SHLIB_LD_LIBS@
STLIB_LD = @STLIB_LD@
TCL_BIN_DIR = @TCL_BIN_DIR@
TCL_DEFS = @TCL_DEFS@
TCL_EXTRA_CFLAGS = @TCL_EXTRA_CFLAGS@
TCL_LD_FLAGS = @TCL_LD_FLAGS@
TCL_LIBS = @TCL_LIBS@
TCL_SHLIB_LD_LIBS = @TCL_SHLIB_LD_LIBS@
TCL_SRC_DIR = @TCL_SRC_DIR@
TCL_DBGX = @TCL_DBGX@
TCL_STUB_LIB_FILE = @TCL_STUB_LIB_FILE@
TCL_STUB_LIB_SPEC = @TCL_STUB_LIB_SPEC@
TCL_TOOL_DIR_NATIVE = @TCL_TOOL_DIR_NATIVE@
TCL_TOP_DIR_NATIVE = @TCL_TOP_DIR_NATIVE@
TCL_UNIX_DIR_NATIVE = @TCL_UNIX_DIR_NATIVE@
TCL_WIN_DIR_NATIVE = @TCL_WIN_DIR_NATIVE@
INCLUDE_DIR_NATIVE = @INCLUDE_DIR_NATIVE@
TCL_BMAP_DIR_NATIVE = @TCL_BMAP_DIR_NATIVE@
TCL_PLATFORM_DIR_NATIVE = @TCL_PLATFORM_DIR_NATIVE@
TCL_GENERIC_DIR_NATIVE = @TCL_GENERIC_DIR_NATIVE@
TCLSH_PROG = @TCLSH_PROG@
PROCOMP = @PROCOMP@ -nologo
CYGPATH = @CYGPATH@

AUTOCONF = autoconf

LDFLAGS = $(LDFLAGS_DEFAULT)

INCLUDES = @TCL_INCLUDES@

EXTRA_CFLAGS = $(TCL_DEFS) $(PROTO_FLAGS) $(SECURITY_FLAGS) $(MEM_DEBUG_FLAGS) $(KEYSYM_FLAGS) $(NO_DEPRECATED_FLAGS)

DEFS = @DEFS@ $(EXTRA_CFLAGS)

ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
CONFIGDIR = @CONFIGDIR@
mkinstalldirs = $(SHELL) $(CONFIGDIR)/mkinstalldirs
CONFIG_CLEAN_FILES = mkIndex.tcl

CPPFLAGS = @CPPFLAGS@
LIBS = @LIBS@
AR = ar
CFLAGS = @CFLAGS@
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) -o $@

#========================================================================
# Start of user-definable TARGETS section
#========================================================================

#========================================================================
# TEA TARGETS.  Please note that the "libraries:" target refers to platform
# independent files, and the "binaries:" target inclues executable programs and
# platform-dependent libraries.  Modify these targets so that they install
# the various pieces of your package.  The make and install rules
# for the BINARIES that you specified above have already been done.
#========================================================================

all: binaries libraries doc

#========================================================================
# The binaries target builds executable programs, Windows .dll's, unix
# shared/static libraries, and any other platform-dependent files.
# The list of targets to build for "binaries:" is specified at the top
# of the Makefile, in the "BINARIES" variable.
#========================================================================

binaries:

libraries: $(LIB_FILES) pkgIndex.tcl

doc:

install: all install-binaries install-libraries install-doc

install-binaries: binaries install-lib-binaries install-bin-binaries

#========================================================================
# This rule installs platform-independent files, such as header files.
#========================================================================

install-libraries: libraries installdirs
	@echo "Installing Tcl files in $(pkglibdir)"
	@for i in $(LIB_FILES) ; do \
	    $(INSTALL_SCRIPT) $$i $(pkglibdir) ; \
	done;
	@for i in $(PCX_FILES) ; do \
	    echo "Installing $$i" ; \
	    $(INSTALL_SCRIPT) $$i $(pkglibdir) ; \
	done;
	$(INSTALL_SCRIPT) pkgIndex.tcl $(pkglibdir) ; \

#========================================================================
# Install documentation.  Unix manpages should go in the $(mandir)
# directory.
#========================================================================

install-doc: doc

#========================================================================
# Test suite.  Note that TESTFLAGS is not defined anywhere in the Makefile.
# It is used for specifying additional arguments to the test suite on
# the "make" command line:
# % make TESTFLAGS="-verbose p" test
# or
# % export TESTFLAGS="-verbose p"
# % make test
#========================================================================

test: $(TCLSH_PROG)
	TCL_LIBRARY=$(TCL_LIBRARY_DIR) \
	LD_LIBRARY_PATH=$(BUILD_DIR):$(TCL_BIN_DIR):$(LD_LIBRARY_PATH) \
	PATH="$(BUILD_DIR)":"$(TCL_BIN_DIR)":"$(PATH)" \
	$(TCLSH_PROG) `@CYGPATH@ $(srcdir)/tests/all.tcl` \
		-exedir `@CYGPATH@ $(bindir)` $(TESTFLAGS)

depend:

#========================================================================
# Enumerate the names of the object files included in this package.
# These objects are created and linked into the final library.  In
# most cases these object files will correspond to the source files
# above.
#
# $(checker_LIB_FILE) should be listed as part of the BINARIES variable
# at the top of the Makefile.  That will ensure that this target is built
# when you run "make binaries".
#
# You shouldn't need to modify this target, except to change the package
# name from "checker" to your package's name.
#========================================================================

$(checker_LIB_FILE):

#========================================================================
# We need to enumerate the list of .c to .o lines here.
# Unfortunately, there does not seem to be any other way to do this
# in a Makefile-independent way.  We can't use VPATH because it picks up
# object files that may be located in the source directory.
#
# In the following lines, $(srcdir) refers to the toplevel directory
# containing your extension.  If your sources are in a subdirectory,
# you will have to modify the paths to reflect this:
#
# checker.$(OBJEXT): $(srcdir)/src/win/checker.c
# 	$(COMPILE) -c `@CYGPATH@ $(srcdir)/src/win/checker.c` -o $@
#========================================================================

analyzer.tbc : $(srcdir)/analyzer.tcl
	$(PROCOMP) -out analyzer.tbc `@CYGPATH@ $(srcdir)/analyzer.tcl`

blt.tbc : $(srcdir)/blt.tcl
	$(PROCOMP) -out blt.tbc `@CYGPATH@ $(srcdir)/blt.tcl`

checker.tbc : $(srcdir)/checker.tcl
	$(PROCOMP) -out checker.tbc `@CYGPATH@ $(srcdir)/checker.tcl`

checkerCmdline.tbc : $(srcdir)/checkerCmdline.tcl
	$(PROCOMP) -out checkerCmdline.tbc `@CYGPATH@ $(srcdir)/checkerCmdline.tcl`

configure.tbc : $(srcdir)/configure.tcl
	$(PROCOMP) -out configure.tbc `@CYGPATH@ $(srcdir)/configure.tcl`

context.tbc : $(srcdir)/context.tcl
	$(PROCOMP) -out context.tbc `@CYGPATH@ $(srcdir)/context.tcl`

coreTcl.tbc : $(srcdir)/coreTcl.tcl
	$(PROCOMP) -out coreTcl.tbc `@CYGPATH@ $(srcdir)/coreTcl.tcl`

coreTk.tbc : $(srcdir)/coreTk.tcl
	$(PROCOMP) -out coreTk.tbc `@CYGPATH@ $(srcdir)/coreTk.tcl`

expect.tbc : $(srcdir)/expect.tcl
	$(PROCOMP) -out expect.tbc `@CYGPATH@ $(srcdir)/expect.tcl`

filter.tbc : $(srcdir)/filter.tcl
	$(PROCOMP) -out filter.tbc `@CYGPATH@ $(srcdir)/filter.tcl`

incrTcl.tbc : $(srcdir)/incrTcl.tcl
	$(PROCOMP) -out incrTcl.tbc `@CYGPATH@ $(srcdir)/incrTcl.tcl`

location.tbc : $(srcdir)/location.tcl
	$(PROCOMP) -out location.tbc `@CYGPATH@ $(srcdir)/location.tcl`

message.tbc : $(srcdir)/message.tcl
	$(PROCOMP) -out message.tbc `@CYGPATH@ $(srcdir)/message.tcl`

tclDP.tbc : $(srcdir)/tclDP.tcl
	$(PROCOMP) -out tclDP.tbc `@CYGPATH@ $(srcdir)/tclDP.tcl`

tclX.tbc : $(srcdir)/tclX.tcl
	$(PROCOMP) -out tclX.tbc `@CYGPATH@ $(srcdir)/tclX.tcl`

tkTable.tbc : $(srcdir)/tkTable.tcl
	$(PROCOMP) -out tkTable.tbc `@CYGPATH@ $(srcdir)/tkTable.tcl`

userproc.tbc : $(srcdir)/userproc.tcl
	$(PROCOMP) -out userproc.tbc `@CYGPATH@ $(srcdir)/userproc.tcl`


#========================================================================
# End of user-definable section
#========================================================================

#========================================================================
# Don't modify the file to clean here.  Instead, set the "CLEANFILES"
# variable in configure.in
#========================================================================

clean:  
	-test -z "$(BINARIES)" || rm -f $(BINARIES)
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean: clean
	-rm -f *.tab.c
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*
	-rm -f config.status

#========================================================================
# Install binary object libraries.  On Windows this includes both .dll and
# .lib files.  Because the .lib files are not explicitly listed anywhere,
# we need to deduce their existence from the .dll file of the same name.
# Additionally, the .dll files go into the bin directory, but the .lib
# files go into the lib directory.  On Unix platforms, all library files
# go into the lib directory.  In addition, this will generate the pkgIndex.tcl
# file in the install location (assuming it can find a usable tclsh8.2 shell)
#
# You should not have to modify this target.
#========================================================================

install-lib-binaries: installdirs
	@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    ext=`echo $$p|sed -e "s/.*\.//"`; \
	    if test "x$$ext" = "xdll"; then \
	        echo " $(INSTALL_DATA) $$p $(DESTDIR)$(bindir)/$$p"; \
	        $(INSTALL_DATA) $$p $(DESTDIR)$(bindir)/$$p; \
		lib=`basename $$p|sed -e 's/.[^.]*$$//'`.lib; \
		if test -f $$lib; then \
		    echo " $(INSTALL_DATA) $$lib $(DESTDIR)$(libdir)/$$lib"; \
	            $(INSTALL_DATA) $$lib $(DESTDIR)$(libdir)/$$lib; \
		fi; \
	    else \
		echo " $(INSTALL_DATA) $$p $(DESTDIR)$(libdir)/$$p"; \
	        $(INSTALL_DATA) $$p $(DESTDIR)$(libdir)/$$p; \
	    fi; \
	  else :; fi; \
	done
	@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(RANLIB) $(DESTDIR)$(bindir)/$$p"; \
	    $(RANLIB) $(DESTDIR)$(bindir)/$$p; \
	  else :; fi; \
	done

#========================================================================
# Install binary executables (e.g. .exe files)
#
# You should not have to modify this target.
#========================================================================

install-bin-binaries: installdirs
	@list='$(bin_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(INSTALL_DATA) $$p $(DESTDIR)$(bindir)/$$p"; \
	    $(INSTALL_DATA) $$p $(DESTDIR)$(bindir)/$$p; \
	  else :; fi; \
	done

.SUFFIXES: .c .o .obj

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

uninstall-binaries:
	@$(NORMAL_UNINSTALL)
	list='$(BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(libdir)/$$p; \
	done

installdirs:
	$(mkinstalldirs)  $(DESTDIR)$(libdir)
	$(mkinstalldirs)  $(DESTDIR)$(pkglibdir)

.PHONY: all binaries clean depend distclean doc install installdirs \
libraries test

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
