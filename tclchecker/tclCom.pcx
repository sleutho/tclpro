# tclCom.pcx --
#
#	This file implements the TclPro Checker extension for TclCom.
#
# Copyright (c) 1999-2000 Ajuba Solutions
# All rights reserved.
# 
# RCS: @(#) $Id: tclCom.pcx,v 1.10 2000/05/30 22:28:56 wart Exp $

package require checker
package provide tclCom 1.0

checker::register tclCom 1.0
set configure::verTable(tclCom,1.0) $::projectInfo::baseTclVers

package require analyzer 1.0
namespace import -force ::analyzer::*

namespace eval tclCom {

    # aliasCmds --
    # Define the set of commands that are created as aliases of the
    # corresponding tclcom::* commands.  These aliases are created only 
    # for the current version incr Tcl.
    
    variable aliasCmds {
	 configure createobject foreachitem info loadtypelib release
    }

    # scanCmdsX.X --
    # Define the set of commands that need to be recursed into when 
    # generating a list of user defiend procs, namespace and Class 
    # contexts and procedure name resolutions info.

    variable scanCmds1.0 {
	foreachitem-TPC-SCAN		1		
	tclcom::foreachitem-TPC-SCAN	1		
    }

    # Define the set of command-specific checkers used by this package.

    variable checkers1.0 {
	configure	{checkSimpleArgs 2 2 {{checkOption {
		{-currencymode {checkOption {
		    {list	{checkSimpleArgs 0 0 {checkWord}}}
		    {numeric	{checkSimpleArgs 0 0 {checkWord}}}
		} {}}}
	        {-implicitreleasemodel {checkBoolean}}
	    } {}}}}
	createobject	{checkSimpleArgs 1 5 {
	    checkWord {checkSwitches 1 {
		{-hostname {checkWord}}
		{-name {checkWord}}
	    } {}}}
	}
	foreachitem	{analyzer::checkTailArgsFirst \
		{checkSimpleArgs 2 3 {tclCom::checkVarList checkWord}} \
		{checkSimpleArgs 1 1 {checkBody}} \
	    1}
	info		{checkSimpleArgs 2 2 {{checkOption {
	    {functions		{checkSimpleArgs 1 1 {checkWord}}}
	    {iid		{checkSimpleArgs 1 1 {checkWord}}}
	    {name		{checkSimpleArgs 1 1 {checkWord}}}
	} {}}}}
	loadtypelib	{checkSimpleArgs 1 1 {checkFileName}}
	release		{checkSimpleArgs 1 -1 {checkWord}}
    }
}

proc ::tclCom::init {ver} {

    foreach name [lsort [info vars ::tclCom::scanCmds*]] {
	analyzer::addScanCmds [set $name]
	if {$name == "::tclCom::scanCmds$ver"} {
	    break
	}
    }
    foreach name [lsort [info vars ::tclCom::checkers*]] {
	analyzer::addCheckers [set $name]
	if {$name == "::tclCom::checkers$ver"} {
	    break
	}
    }

    # messages --
    # Define the set of message types and their human-readable translations. 

    variable messages
    array set messages {
    }

    # Add aliased checkers.
    # Alias the standard tclcom::* commands so the namespace qualifier 
    # appears in the command name.

    set aliases {}
    foreach name $::tclCom::aliasCmds {
	if {[analyzer::topChecker $name] != {}} {
	    lappend aliases tclcom::$name [analyzer::topChecker $name]
	}
    }
    analyzer::addCheckers $aliases
}

# tclCom::getMessage --
#
#	Convert the message type into a human readable string.  
#
# Arguments:
#	mid	The messageID to look up.
#
# Results:
#	Return the message string or empty string if the
#	message type is undefined.

proc tclCom::getMessage {mid} {
    variable messages

    if {[info exists messages($mid)]} {
	return [lindex $messages($mid) 0]
    } else {
	return $mid
    }
}

# tclCom::getTypes --
#
#	Convert the message id into a list of message types.
#
# Arguments:
#	mid	The messageID to look up.
#
# Results:
#	Return the list of message type keywords.

proc tclCom::getTypes {mid} {
    variable messages

    if {[info exists messages($mid)]} {
	return [lrange $messages($mid) 1 end]
    } else {
	return err
    }
}

# tclCom::checkForeachitemCmd --

proc tclCom::checkVarList {tokens index} {

    set word [lindex $tokens $index]
    
    if {[getLiteral $word literal]} {
	set index [checkListValues 1 -1 checkVarName $tokens $index]
    } else {
	set index [checkVarName $tokens $index]
    }
    return $index
}

