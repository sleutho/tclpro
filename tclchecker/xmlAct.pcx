# xmlAct.pcx --
#
#	This file implements the TclPro Checker extension for the XML
#	Action API.
#
# Copyright (c) 1999-2000 Ajuba Solutions
# All rights reserved.
# 
# RCS: @(#) $Id: xmlAct.pcx,v 1.7 2000/05/30 22:28:58 wart Exp $

package require checker
package provide xmlAct 1.0

checker::register xmlAct 1.0
set configure::verTable(xmlAct,1.0) $::projectInfo::baseTclVers

package require analyzer 1.0
namespace import -force ::analyzer::*

namespace eval xmlAct {

    # aliasCmds --
    # Define the set of commands that are created as aliases of the
    # corresponding xmlact::* commands.
    
    variable aliasCmds {
	create delete parse process reset action skip
    }

    # scanCmdsX.X --
    # Define the set of commands that need to be recuresed into when 
    # generating a list of user defiend procs, namespace and Class 
    # contexts and procedure name resolutions info.

    variable scanCmds1.0 {
    }

    # Define the set of command-specific checkers used by this package.

    variable checkers1.0 {
	action			{checkSimpleArgs 3 -1 {checkWord {
	    checkSwitches 0 {-start {} -end {} -text {} -default {}} {
		checkSimpleArgs 2 -1 {
		    checkWord checkProcName xmlAct::checkValuePatterns}}}}}
	create			{checkSwitches 1 {
	    {-name checkWord}
	    {-progress checkBody}
	    -trim -prune} {}}
	delete			{checkSimpleArgs 1 1 checkWord}
	parse			{checkSimpleArgs 3 3 {
	    checkWord checkWord checkBoolean}}
	process			{checkSimpleArgs 2 2 checkWord}
	reset			{checkSimpleArgs 1 1 checkWord}
	skip			{checkSimpleArgs 2 2 {
	    checkWord {checkListValues 0 -1 {xmlAct::checkAction}}}}
    }
}

proc ::xmlAct::init {ver} {

    foreach name [lsort [info vars ::xmlAct::scanCmds*]] {
	analyzer::addScanCmds [set $name]
	if {$name == "::xmlAct::scanCmds$ver"} {
	    break
	}
    }
    foreach name [lsort [info vars ::xmlAct::checkers*]] {
	analyzer::addCheckers [set $name]
	if {$name == "::xmlAct::checkers$ver"} {
	    break
	}
    }

    # messages --
    # Define the set of message types and their human-readable translations. 

    variable messages
    array set messages {
	xmlAct::badXMLaction {"invalid action, must be start children, end, or all" err}
    }

    # Add aliased checkers.
    # Alias the standard xmlact::* commands so the namespace qualifier 
    # appears in the comand name.

    set aliases {}
    foreach name $::xmlAct::aliasCmds {
	if {[analyzer::topChecker $name] != {}} {
	    lappend aliases xmlact::$name [analyzer::topChecker $name]
	}
    }
    analyzer::addCheckers $aliases
}

# xmlAct::getMessage --
#
#	Convert the message type into a human readable
#	string.  
#
# Arguments:
#	mid	The messageID to look up.
#
# Results:
#	Return the message string or empty string if the
#	message type is undefined.

proc xmlAct::getMessage {mid} {
    variable messages

    if {[info exists messages($mid)]} {
	return [lindex $messages($mid) 0]
    } else {
	return $mid
    }
}

# xmlAct::getTypes --
#
#	Convert the message id into a list of message types.
#
# Arguments:
#	mid	The messageID to look up.
#
# Results:
#	Return the list of message type keywords.

proc xmlAct::getTypes {mid} {
    variable messages

    if {[info exists messages($mid)]} {
	return [lrange $messages($mid) 1 end]
    } else {
	return err
    }
}

# xmlAct::checkValuePatterns --
#
#	Check to see the -text, -value, and -attributes switch tokens,
#	starting with index, are followed by the correct number of
#	arguments (all of which are just words).
#
# Arguments:
#	tokens		The list of word tokens for the current command.
#	index		The index of the next word to be checked.
#
# Results:
#	Returns the index of the last token + 1 (all have been checked).

proc xmlAct::checkValuePatterns {tokens index} {
    
    set argc [llength $tokens]

    while {$index < $argc} {
	# if the arg is literal and matches -text, -value, or -attributes,
	# make sure there at least 1, 2, or 1 args follow the switch,
	# respectively.
	
	set word [lindex $tokens $index]
	if {[getLiteral $word literal]} {
	    switch -exact -- $literal {
		"-text" {
		    if {[expr {$index + 1}] >= $argc} {
			logError noSwitchArg {} "-text"
		    } else {
			incr index
		    }
		}
		"-value" {
		    if {[expr {$index + 2}] >= $argc} {
			logError noSwitchArg {} "-value"
		    } else {
			incr index
			set index [checkWord $tokens $index]
		    }
		}
		"-attributes" {
		    if {[expr {$index + 1}] >= $argc} {
			logError noSwitchArg {} "-attributes"
		    } else {
			incr index
		    }
		}
	    }
	}
	set index [checkWord $tokens $index]
    }
    return $index
}

# xmlAct::checkAction --
#
#	Check if the token is either nonliteral or one of the following
#	strings:  start children end all
#
# Arguments:
#	tokens		The list of word tokens for the current command.
#	index		The index of the next word to be checked.
#
# Results:
#	Returns the index of the last token + 1 (all have been checked).

proc xmlAct::checkAction {tokens index} {
    
    set argc [llength $tokens]

    while {$index < $argc} {	
	set word [lindex $tokens $index]
	if {[getLiteral $word literal]} {
	    if {[lsearch {start children end all} $literal] == -1} {
		logError badXMLaction {}
	    }
	    incr index
	} else {
	    set index [checkWord $tokens $index]
	}
    }
    return $index
}
