# oratcl.pcx --
#
#	This file implements the TclPro Checker extension for OraTcl.
#
# Copyright (c) 1999-2000 Ajuba Solutions
# All rights reserved.
# 
# RCS: @(#) $Id: oratcl.pcx,v 1.5 2000/05/30 22:28:53 wart Exp $

package require checker
package provide oratcl 1.0

checker::register oratcl 1.0
set configure::verTable(oratcl,2.5) $::projectInfo::baseTclVers

package require analyzer 1.0
namespace import -force ::analyzer::*

namespace eval oratcl {

    # scanCmdsX.X --
    # Define the set of commands that need to be recuresed into when 
    # generating a list of user defiend procs, namespace and Class 
    # contexts and procedure name resolutions info.

    variable scanCmds2.5 {
	orafetch-TPC-SCAN		1		
    }

    # Define the set of command-specific checkers used by this package.

    variable checkers2.5 {
	oraautocom		{checkSimpleArgs 2 2 {
	    checkWord oratcl::checkOnOff}
	}
	orabindexec		{checkSimpleArgs 1 -1 {checkWord
	    {checkSwitches 1 {-async} {oratcl::checkColonVarValPairs}}}
	}
	orabreak		{checkSimpleArgs 1 1 checkWord}
	oracancel		{checkSimpleArgs 1 1 checkWord}
	oraclose		{checkSimpleArgs 1 1 checkWord}
	oracols			{checkSimpleArgs 1 1 checkWord}
	oracommit		{checkSimpleArgs 1 1 checkWord}
	orafetch		{checkSimpleArgs 1 -1 {
	    checkWord checkBody oratcl::checkSubstChar
	    oratcl::checkVarValPairs}
	}
	oralogoff		{checkSimpleArgs 1 1 checkWord}
	oralogon		{checkSimpleArgs 1 1 oratcl::checkConnectStr}
	oraopen			{checkSimpleArgs 1 1 checkWord}
	oraplexec		{checkSimpleArgs 2 -1 {
	    checkWord checkWord oratcl::checkColonVarValPairs}
	}
	orapoll			{checkSimpleArgs 1 2 {
	    checkWord {checkSwitches 1 {-all} {}}}
	}
	orareadlong		{checkSimpleArgs 5 5 {
				    checkWord checkWord checkWord \
					    checkWord checkFileName}
	}
	oraroll			{checkSimpleArgs 1 1 checkWord}
	orasql		{checkSimpleArgs 2 4 {
	    checkWord checkWord
	    {checkSwitches 1 {-async -parseonly} {}}}
	}
	orawritelong		{checkSimpleArgs 5 5 {
				    checkWord checkWord checkWord \
					    checkWord checkFileName}
	}
    }
}

proc ::oratcl::init {ver} {

    foreach name [lsort [info vars ::oratcl::scanCmds*]] {
	analyzer::addScanCmds [set $name]
	if {$name == "::oratcl::scanCmds$ver"} {
	    break
	}
    }
    foreach name [lsort [info vars ::oratcl::checkers*]] {
	analyzer::addCheckers [set $name]
	if {$name == "::oratcl::checkers$ver"} {
	    break
	}
    }

    # messages --
    # Define the set of message types and their human-readable translations. 

    variable messages
    array set messages {
	oratcl::badConnectStr {"invalid Oracle connect string" err}
	oratcl::badSubstChar {"invalid Oracle substitution character" err}
	oratcl::badOnOff {"invalid \"on\" or \"off\" value" err}
	oratcl::missingColon {"varName must be preceded by ':'" err}
    }
}

# oratcl::getMessage --
#
#	Convert the message type into a human readable
#	string.  
#
# Arguments:
#	mid	The messageID to look up.
#
# Results:
#	Return the message string or empty string if the
#	message type is undefined.

proc oratcl::getMessage {mid} {
    variable messages

    if {[info exists messages($mid)]} {
	return [lindex $messages($mid) 0]
    } else {
	return $mid
    }
}

# oratcl::getTypes --
#
#	Convert the message id into a list of message types.
#
# Arguments:
#	mid	The messageID to look up.
#
# Results:
#	Return the list of message type keywords.

proc oratcl::getTypes {mid} {
    variable messages

    if {[info exists messages($mid)]} {
	return [lrange $messages($mid) 1 end]
    } else {
	return err
    }
}

# oratcl::checkConnectStr --
#
#	Check to see the next token is a legal connect string
#	(or nonliteral).  If not, log an badConnectStr error.
#
# Arguments:
#	tokens		The list of word tokens for the current command.
#	index		The index of the next word to be checked.
#
# Results:
#	Returns the index of the next token to be checked.

proc oratcl::checkConnectStr {tokens index} {
    set word [lindex $tokens $index]

    # Check to see if it matches one of the following patterns:
    #     ""
    #     name
    #     name/password
    #     name@server
    #     name/password@server
    #     name@n:host:server
    #     name/password@n:host:server

    if {![getLiteral $word literal]} {
	return [checkWord $tokens $index]
    }
    set connectList [split $literal "@"]
    set len [llength $connectList]
    if {$len > 2} {
	logError oratcl::badConnectStr [getTokenRange $word]
    } elseif {$len > 0} {
	set name [lindex $connectList 0]
	if {(![regexp {^\w+(/\w+)?$} $name])} {
	    logError oratcl::badConnectStr [getTokenRange $word]
	} elseif {$len == 2} {
	    set server [lindex $connectList 1]
	    if {![regexp {^(\w:\w+:)?\w+$} $server]} {
		logError oratcl::badConnectStr [getTokenRange $word]
	    }
	}
    }
    return [incr index]
}

# oratcl::checkSubstChar --
#
#	Check to see the next token is a either a single character, empty
#	string, or nonliteral.  If not, log an badSubstChar error.
#
# Arguments:
#	tokens		The list of word tokens for the current command.
#	index		The index of the next word to be checked.
#
# Results:
#	Returns the index of the next token to be checked.

proc oratcl::checkSubstChar {tokens index} {

    set word [lindex $tokens $index]

    if {![getLiteral $word literal]} {
	return [checkWord $tokens $index]
    }
    if {[string length $literal] > 1} {
	logError oratcl::badSubstChar [getTokenRange $word]
    }
    return [incr index]
}

# oratcl::checkOnOff --
#
#	Check to see the next token is "on", "off", or nonliteral.
#	If not, log an badOnOff error.
#
# Arguments:
#	tokens		The list of word tokens for the current command.
#	index		The index of the next word to be checked.
#
# Results:
#	Returns the index of the next token to be checked.

proc oratcl::checkOnOff {tokens index} {

    set word [lindex $tokens $index]

    if {![getLiteral $word literal]} {
	return [checkWord $tokens $index]
    }
    if {($literal != "on") && ($literal != "off")} {
	logError oratcl::badOnOff [getTokenRange $word]
    }
    return [incr index]
}

# oratcl::checkVarValPairs --
#
#	Check to see the tokens starting with index are ?variable value?
#	pairs.  If checkColon is given, variables must begin with a colon,
#	otherwise, a missingColon error is flagged.
#
# Arguments:
#	tokens		The list of word tokens for the current command.
#	index		The index of the next word to be checked.
#	checkColon	Tells whether vars must be preceded by a colon.
#
# Results:
#	Returns the index of the last token + 1 (all have been checked).

proc oratcl::checkVarValPairs {tokens index {checkColon 0}} {
    
    set argc [llength $tokens]

    while {$index < $argc} {
	# if varname is literal, make sure the first char is a ':'
	
	set word [lindex $tokens $index]
	if {[getLiteral $word literal]} {
	    if {$checkColon} {
		if {[string index $literal 0] != ":"} {
		    logError oratcl::missingColon [getTokenRange $word]
		}
	    }
	}
	set index [checkVarName $tokens $index]
	if {$index < $argc} {
	    set index [checkWord $tokens $index]
	} else {
	    logError numArgs {}
	}
    }
    return $index
}

# oratcl::checkColonVarValPairs --
#
#	Check to see the tokens starting with index are ?:variable value?
#	pairs.
#
# Arguments:
#	tokens		The list of word tokens for the current command.
#	index		The index of the next word to be checked.
#
# Results:
#	Returns the index of the last token + 1 (all have been checked).

proc oratcl::checkColonVarValPairs {tokens index} {
    return [checkVarValPairs $tokens $index 1]
}
