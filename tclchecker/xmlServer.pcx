# xmlServer.pcx --
#
#	This file implements the TclPro Checker extension for the XML
#	Server API.
#
# Copyright (c) 1999-2000 Ajuba Solutions
# All rights reserved.
# 
# RCS: @(#) $Id: xmlServer.pcx,v 1.3 2000/05/30 22:28:59 wart Exp $

package require checker
package provide xmlServer 1.0

checker::register xmlServer 1.0
set configure::verTable(xmlServer,1.0) $::projectInfo::baseTclVers

package require analyzer 1.0
namespace import -force ::analyzer::*

namespace eval xmlServer {

    # aliasCmds --
    # Define the set of commands that are created as aliases of the
    # corresponding xmld::* commands.
    
    variable aliasCmds {
	getenv getpost respond redirect log
    }

    # scanCmdsX.X --
    # Define the set of commands that need to be recuresed into when 
    # generating a list of user defiend procs, namespace and Class 
    # contexts and procedure name resolutions info.

    variable scanCmds1.0 {
    }

    # Define the set of command-specific checkers used by this package.

    variable checkers1.0 {
	getenv		{checkSimpleArgs 0 0 checkWord}
	getpost		{checkSimpleArgs 0 1 checkWord}
	respond		{checkSimpleArgs 2 3 {{checkOption {
	    {status		{checkSimpleArgs 1 1 {checkWholeNum}}}
	    {header		{checkSimpleArgs 1 1 {checkWord}}}
	    {data		{checkSimpleArgs 1 2 {checkWord}}}
	    {file		{checkSimpleArgs 1 1 {checkFileName}}}
	} {}}}}
	redirect	{checkSimpleArgs 2 2 {{
	    checkSwitches 0 {
		-external {}
		-internal {}} {
		    checkSimpleArgs 1 1 checkWord}}}}
	log		{checkSimpleArgs 2 2 {{
	    checkSwitches 0 {
		-emerg {} 
		-alert {} 
		-crit {}
		-error {}
		-warn {}
		-notice {}
		-info {}
		-debug {}} {
		    checkSimpleArgs 1 1 checkWord}}}}
    }
}

proc ::xmlServer::init {ver} {

    foreach name [lsort [info vars ::xmlServer::scanCmds*]] {
	analyzer::addScanCmds [set $name]
	if {$name == "::xmlServer::scanCmds$ver"} {
	    break
	}
    }
    foreach name [lsort [info vars ::xmlServer::checkers*]] {
	analyzer::addCheckers [set $name]
	if {$name == "::xmlServer::checkers$ver"} {
	    break
	}
    }

    # messages --
    # Define the set of message types and their human-readable translations. 

    variable messages
    array set messages {
    }

    # Add aliased checkers.
    # Alias the standard xmld::* commands so the namespace qualifier 
    # appears in the comand name.

    set aliases {}
    foreach name $::xmlServer::aliasCmds {
	if {[analyzer::topChecker $name] != {}} {
	    lappend aliases xmld::$name [analyzer::topChecker $name]
	}
    }
    analyzer::addCheckers $aliases
}

# xmlServer::getMessage --
#
#	Convert the message type into a human readable
#	string.  
#
# Arguments:
#	mid	The messageID to look up.
#
# Results:
#	Return the message string or empty string if the
#	message type is undefined.

proc xmlServer::getMessage {mid} {
    variable messages

    if {[info exists messages($mid)]} {
	return [lindex $messages($mid) 0]
    } else {
	return $mid
    }
}

# xmlServer::getTypes --
#
#	Convert the message id into a list of message types.
#
# Arguments:
#	mid	The messageID to look up.
#
# Results:
#	Return the list of message type keywords.

proc xmlServer::getTypes {mid} {
    variable messages

    if {[info exists messages($mid)]} {
	return [lrange $messages($mid) 1 end]
    } else {
	return err
    }
}
