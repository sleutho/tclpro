# tclDomPro.pcx --
#
#	This file implements the TclPro Checker extension for TclDomPro.
#
# Copyright (c) 1999-2000 Ajuba Solutions
# All rights reserved.
# 
# RCS: @(#) $Id: tclDomPro.pcx,v 1.12 2000/05/30 22:28:57 wart Exp $

package require checker
package provide tclDomPro 1.0

checker::register tclDomPro 1.0
set configure::verTable(tclDomPro,1.0) $::projectInfo::baseTclVers

package require analyzer 1.0
namespace import -force ::analyzer::*

namespace eval tclDomPro {

    # aliasCmds --
    # Define the set of commands that are created as aliases of the
    # corresponding dom::* commands.  These aliases are created only 
    # for the current version incr Tcl.
    
    variable aliasCmds {
	DOMImplementation document node element processinginstruction
    }

    # scanCmdsX.X --
    # Define the set of commands that need to be recursed into when 
    # generating a list of user defiend procs, namespace and Class 
    # contexts and procedure name resolutions info.

    variable scanCmds1.0 {
	DOMImplementation-TPC-SCAN		1		
	dom::DOMImplementation-TPC-SCAN		1		
    }

    # Define the set of command-specific checkers used by this package.

    variable checkers1.0 {
	DOMImplementation	{checkSimpleArgs 1 -1 {{checkOption {
	    {hasFeature		{checkSimpleArgs 2 2 {checkWord}}}
	    {create		{checkSimpleArgs 0 1 {checkVarName}}}
	    {destroy		{checkSimpleArgs 1 1 {checkWord}}}
	    {parse		{checkSimpleArgs 1 3 {checkWord {checkOption {
		{-parser {checkSimpleArgs 1 1 checkWord}}
		{-progresscommand {checkSimpleArgs 1 1 checkBody}}
		{-chunksize {checkSimpleArgs 1 1 checkInt}}
		{-final {checkSimpleArgs 1 1 checkBoolean}}
		{-trim {checkSimpleArgs 0 0 {}}}} {}}}}}
	    {serialize		{checkSimpleArgs 1 3 {checkWord {checkOption {
		{-newline {checkSimpleArgs 1 1 {checkList}}}} {}}}}}
	    {trim		{checkSimpleArgs 1 1 {checkWord}}}
	} {}}}}
	document		{checkSimpleArgs 2 -1 {{checkOption {
	    {cget		{checkSimpleArgs 2 2 {checkWord
		{checkSwitches 0 {
		    -doctype {}
		    -implementation {}
		    -documentElement {}
		} {}}}}}
	    {configure		{checkSimpleArgs 2 3 {checkWord
		{checkOption {
		    {-doctype {checkSimpleArgs 1 1 {checkWord}}}
		    {-implementation {checkSimpleArgs 1 1 {checkWord}}}
		} {}}}}}
	    {createElement	{checkSimpleArgs 2 2 {checkWord}}}
	    {createDocumentFragment	{checkSimpleArgs 1 1 {checkWord}}}
	    {createTextNode	{checkSimpleArgs 2 2 {checkWord}}}
	    {createComment	{checkSimpleArgs 2 2 {checkWord}}}
	    {createCDATASection	{checkSimpleArgs 2 2 {checkWord}}}
	    {createProcessingInstruction	{checkSimpleArgs 3 3 {checkWord}}}
	    {createAttribute	{checkSimpleArgs 2 2 {checkWord}}}
	    {createEntity	{checkSimpleArgs 1 1 {checkWord}}}
	    {createEntityReference	{checkSimpleArgs 1 1 {checkWord}}}
	    {createDocTypeDecl	{checkSimpleArgs 6 6 {checkWord}}}
	    {getElementsByTagName	{checkSimpleArgs 2 2 {checkWord}}}
	} {}}}}
	node			{checkSimpleArgs 2 -1 {{checkOption {
	    {cget		{checkSimpleArgs 2 2 {
		checkWord {checkSwitches 0 {
		    -nodeName {}
		    -nodeType {}
		    -parentNode {}
		    -childNodes {}
		    -firstChild {}
		    -lastChild {}
		    -previousSibling {}
		    -nextSibling {}
		    -attributes {}
		    -nodeValue {}
		    -startLine {}
		    -startColumn {}
		    -startWidth {}
		    -endLine {}
		    -endColumn {}
		    -endWidth {}
		    -parsingComplete {}
		} {}}}}}
	    {configure		{checkSimpleArgs 3 3 {
		checkWord {checkOption {
		    {-childNodes {checkSimpleArgs 1 1 {checkWord}}}
		    {-firstChild {checkSimpleArgs 1 1 {checkWord}}}
		    {-lastChild {checkSimpleArgs 1 1 {checkWord}}}
		    {-nodeValue {checkSimpleArgs 1 1 {checkWord}}}
		} {}}}}}
	    {insertBefore	{checkSimpleArgs 2 3 {checkWord}}}
	    {replaceChild	{checkSimpleArgs 3 3 {checkWord}}}
	    {removeChild	{checkSimpleArgs 2 2 {checkWord}}}
	    {appendChild	{checkSimpleArgs 2 2 {checkWord}}}
	    {hasChildNodes	{checkSimpleArgs 1 1 {checkWord}}}
	    {cloneNode		{checkSimpleArgs 1 2 {checkWord checkBoolean}}}
	    {children		{checkSimpleArgs 1 1 {checkWord}}}
	    {parent		{checkSimpleArgs 1 1 {checkWord}}}
	} {}}}}
	element			{checkSimpleArgs 2 -1 {{checkOption {
	    {cget		{checkSimpleArgs 2 2 {
		checkWord {checkSwitches 0 {
		    -tagName {}
		    -empty {}
		} {}}}}}
	    {configure		{checkSimpleArgs 3 3 {
		checkWord {checkOption {
		    {-tagName {checkSimpleArgs 1 1 {checkWord}}}
		    {-empty {checkSimpleArgs 1 1 {checkBoolean}}}
		} {}}}}}
	    {getAttribute		{checkSimpleArgs 2 2 {checkWord}}}
	    {setAttribute		{checkSimpleArgs 3 3 {checkWord}}}
	    {removeAttribute		{checkSimpleArgs 2 2 {checkWord}}}
	    {getAttributeNode		{checkSimpleArgs 2 2 {checkWord}}}
	    {setAttributeNode		{checkSimpleArgs 3 3 {checkWord}}}
	    {removeAttributeNode	{checkSimpleArgs 2 2 {checkWord}}}
	    {getElementsByTagName	{checkSimpleArgs 2 2 {checkWord}}}
	    {normalize			{checkSimpleArgs 1 1 {checkWord}}}
	} {}}}}
	processinginstruction	{checkSimpleArgs 2 -1 {{checkOption {
	    {cget		{checkSimpleArgs 2 2 {
		checkWord {checkSwitches 0 {
		    -target {}
		    -data {}
		} {}}}}}
	    {configure		{checkSimpleArgs 3 3 {
		checkWord {checkOption {
		    {-data {checkSimpleArgs 1 1 checkWord}}
		} {}}}}}
	} {}}}}
    }
}

proc ::tclDomPro::init {ver} {

    foreach name [lsort [info vars ::tclDomPro::scanCmds*]] {
	analyzer::addScanCmds [set $name]
	if {$name == "::tclDomPro::scanCmds$ver"} {
	    break
	}
    }
    foreach name [lsort [info vars ::tclDomPro::checkers*]] {
	analyzer::addCheckers [set $name]
	if {$name == "::tclDomPro::checkers$ver"} {
	    break
	}
    }

    # messages --
    # Define the set of message types and their human-readable translations. 

    variable messages
    array set messages {
    }

    # Add aliased checkers.
    # Alias the standard dom::* commands so the namespace qualifier 
    # appears in the comand name.

    set aliases {}
    foreach name $::tclDomPro::aliasCmds {
	if {[analyzer::topChecker $name] != {}} {
	    lappend aliases dom::$name [analyzer::topChecker $name]
	}
    }
    analyzer::addCheckers $aliases
}

# tclDomPro::getMessage --
#
#	Convert the message type into a human readable string.  
#
# Arguments:
#	mid	The messageID to look up.
#
# Results:
#	Return the message string or empty string if the
#	message type is undefined.

proc tclDomPro::getMessage {mid} {
    variable messages

    if {[info exists messages($mid)]} {
	return [lindex $messages($mid) 0]
    } else {
	return $mid
    }
}

# tclDomPro::getTypes --
#
#	Convert the message id into a list of message types.
#
# Arguments:
#	mid	The messageID to look up.
#
# Results:
#	Return the list of message type keywords.

proc tclDomPro::getTypes {mid} {
    variable messages

    if {[info exists messages($mid)]} {
	return [lrange $messages($mid) 1 end]
    } else {
	return err
    }
}
