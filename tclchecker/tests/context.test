# analyzer.test --
#
#	This file contains regression tests for the  routines in the
#	context.tcl file.
#
# Copyright (c) 1998-2000 by Ajuba Solutions
# All rights reserved.
#
# RCS: @(#) $Id: context.test,v 1.2 2000/05/30 22:24:45 wart Exp $

if {[string compare test [info procs resetAnalyzer]] == 1} {
    source [file  join [pwd] [file dirname [info script]] defs.tcl]
}

analyzer::init
proc getContext {args} {
    set ::result [context::top] 
    return 1
}

test context-1.1 {context::add && context::exists} {
    catch {unset context::knownContext}
    array set context::knownContext ""
    context::add ""
    lsort [array names context::knownContext]
} {::}
test context-1.2 {context::add && context::exists} {
    catch {unset context::knownContext}
    array set context::knownContext ""
    context::add "::"
    lsort [array names context::knownContext]
} {::}
test context-1.3 {context::add && context::exists} {
    catch {unset context::knownContext}
    array set context::knownContext ""
    context::add "::foo"
    lsort [array names context::knownContext]
} {::foo}
test context-1.4 {context::add && context::exists} {
    catch {unset context::knownContext}
    array set context::knownContext ""
    context::add ""
    context::add "::foo"
    context::add "::bar"
    context::add "::foo"
    context::add ""
    lsort [array names context::knownContext]
} {:: ::bar ::foo}
test context-1.5 {context::add && context::exists} {
    catch {unset context::knownContext}
    array set context::knownContext ""
    context::add ""
    context::exists ""
} {1}
test context-1.6 {context::add && context::exists} {
    catch {unset context::knownContext}
    array set context::knownContext ""
    context::exists "::"
} {0}
test context-1.7 {context::add && context::exists} {
    catch {unset context::knownContext}
    array set context::knownContext ""
    context::add "::"
    context::exists ""
} {1}
test context-1.8 {context::add && context::exists} {
    catch {unset context::knownContext}
    array set context::knownContext ""
    context::add "::foo"
    context::add "::"
    context::add "::bar"
    context::exists "::foo"
} {1}
test context-1.9 {context::add && context::exists} {
    catch {unset context::knownContext}
    array set context::knownContext ""
    context::add "::foo"
    context::add "::"
    context::add "::bar"
    context::exists "cat"
} {0}

catch {unset context::knownContext}
set context::knownContext(::) 1
set context::knownContext(::foo) 1
set context::knownContext(::foo::bar) 1

test context-2.1 {context::locate} {
    context::locate :: ::f1
} {::}
test context-2.2 {context::locate} {
    context::locate :: ::foo::f1
} {::foo}
test context-2.3 {context::locate} {
    context::locate :: ::foo::bar::f1
} {::foo::bar}
test context-2.4 {context::locate} {
    context::locate ::foo ::f1
} {::}
test context-2.5 {context::locate} {
    context::locate ::foo ::foo::f1
} {::foo}
test context-2.6 {context::locate} {
    context::locate ::foo ::foo::bar::f1
} {::foo::bar}
test context-2.7 {context::locate} {
    context::locate :: foo::bar
} {::foo}
test context-2.8 {context::locate} {
    context::locate :: foo::bar::cat
} {::foo::bar}
test context-2.9 {context::locate} {
    context::locate :: foo::bar::cat::dog
} {}
test context-2.10 {context::locate} {
    context::locate :: foo::f1
} {::foo}
test context-2.11 {context::locate} {
    context::locate :: foo::bar::f1
} {::foo::bar}
test context-2.12 {context::locate} {
    context::locate :: foo
} {::}
test context-2.13 {context::locate} {
    context::locate :: f1
} {::}
test context-2.14 {context::locate} {
    context::locate :: ""
} {::}
test context-2.15 {context::locate} {
    context::locate :: ::
} {::}
test context-2.16 {context::locate} {
    context::locate ::foo::bar bar::b2
} {}

catch {unset context::knownContext}

test context-3.1 {context::join} {
    context::join UNKNOWN foo
} {UNKNOWN}
test context-3.2 {context::join} {
    context::join ::foo {}
} {::foo}
test context-3.3 {context::join} {
    context::join ::foo ::bar
} {::bar}
test context-3.4 {context::join} {
    context::join :: foo
} {::foo}
test context-3.5 {context::join} {
    context::join ::foo:: bar
} {::foo::bar}
test context-3.6 {context::join} {
    context::join :: foo::
} {::foo}
test context-3.7 {context::join} {
    context::join ::foo bar::
} {::foo::bar}
test context-3.8 {context::join} {
    context::join "::foo bar" cat::
} {::foo bar::cat}

test context-4.1 {context::head} {
    context::head ""
} {}
test context-4.2 {context::head} {
    context::head "::"
} {::}
test context-4.3 {context::head} {
    context::head "::foo::bar"
} {::foo}
test context-4.4 {context::head} {
    context::head "::foo::bar::cat"
} {::foo::bar}
test context-4.5 {context::head} {
    context::head "bar"
} {}
test context-4.6 {context::head} {
    context::head "::bar"
} {::}
test context-4.7 {context::head} {
    context::head "::bar::"
} {::bar}

test context-5.1 {context::top pop push} {
    set context::contextStack "::"
    context::top
} {::}
test context-5.2 {context::top pop push} {
    set context::contextStack "::"
    context::pop
    context::pop
    context::top
} {::}
test context-5.3 {context::top pop push} {
    set context::contextStack "::"
    context::push A
    context::top
} {A}
test context-5.4 {context::top pop push} {
    set context::contextStack "::"
    context::push "A B"
    context::top
} {A B}
test context-5.5 {context::top pop push} {
    set context::contextStack "::"
    context::push A
    context::push B
    context::push C
    context::pop
    context::top
} {B}

test context-6.1 {context::topProtection popProtection pushProtection} {
    set context::protectionStack "::"
    context::topProtection
} {::}
test context-6.2 {context::topProtection popProtection pushProtection} {
    set context::protectionStack "::"
    context::popProtection
    context::popProtection
    context::topProtection
} {::}
test context-6.3 {context::topProtection popProtection pushProtection} {
    set context::protectionStack "::"
    context::pushProtection A
    context::topProtection
} {A}
test context-6.4 {context::topProtection popProtection pushProtection} {
    set context::protectionStack "::"
    context::pushProtection "A B"
    context::topProtection
} {A B}
test context-6.5 {context::topProtection popProtection pushProtection} {
    set context::protectionStack "::"
    context::pushProtection A
    context::pushProtection B
    context::pushProtection C
    context::popProtection
    context::topProtection
} {B}


# cleanup
cleanupTests
return
