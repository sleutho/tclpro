# oratcl_bb.test --
#
#	This file contains Black Box tests that run tclchecker on 
#	OraTcl code that will produce all possible error and warning
#	messages that are specific to OraTcl.
#
# Copyright (c) 1999-2000 by Ajuba Solutions.
# All rights reserved.
#
# RCS: @(#) $Id: oratcl_bb.test,v 1.4 2000/05/30 22:24:56 wart Exp $

if {[string compare test [info procs test]] == 1} {
    lappend auto_path [file join [file dirname [info script]] ..]
    package require protest
    namespace import ::protest::*
}

set tclchecker [findExeFile tclchecker 1]

set echo echo

set pcxDir $::protest::sourceDirectory

# Test for -verbose package name.

test oratcl-1.1 {Test for -verbose package name} {
    set script {oralogon $a}
    set result [catch {exec $echo $script | $tclchecker -pcx $pcxDir -n -q -v} msg]
    set i [lsearch -exact $msg oratcl]
    if {$i != -1} {
	set msg [lindex $msg [expr {$i + 1}]]
    }
    list $result $msg 
} [list 0 $::protest::supportedVersions(Oratcl)]

# Test to see if bodies of control structures are scanned for
# user--defined procs.

test oratcl-2.1 {test scanCmds} {
    set script {orafetch a {proc foo {} {}}; foo}
    set result [catch {exec $echo $script | $tclchecker -pcx $pcxDir -n -q -v} msg]
    set i [lsearch -exact $msg Errors:]
    set e [lindex $msg [expr {$i + 1}]]
    set i [lsearch -exact $msg Warnings:]
    set w [lindex $msg [expr {$i + 1}]]
    list $result $e $w
} [list 0 0 0]

# Run code that trigers oratcl-specific message IDs.

test oratcl-3.1 {generate badConnectStr error} {
    set badScript {oralogon @}
    set result [catch {exec $echo $badScript | $tclchecker -pcx $pcxDir -nologo} msg]
    list $result [string match *badConnectStr* $msg]
} {1 1}

test oratcl-3.2 {generate badSubstChar error} {
    set badScript {orafetch a {set x} ab}
    set result [catch {exec $echo $badScript | $tclchecker -pcx $pcxDir -nologo} msg]
    list $result [string match *badSubstChar* $msg]
} {1 1}

test oratcl-3.3 {generate badOnOff error} {
    set badScript {oraautocom a o}
    set result [catch {exec $echo $badScript | $tclchecker -pcx $pcxDir -nologo} msg]
    list $result [string match *badOnOff* $msg]
} {1 1}

test oratcl-3.4 {generate missingColon error} {
    set badScript {orabindexec $a a $a}
    set result [catch {exec $echo $badScript | $tclchecker -pcx $pcxDir -nologo} msg]
    list $result [string match *missingColon* $msg]
} {1 1}

# cleanup
cleanupTests

