AC_INIT(src/startup.tcl)

SC_SIMPLE_EXEEXT

if test "x${EXEEXT}" = "x"; then
   BIN_EXEEXT=.bin
else
   BIN_EXEEXT=${EXEEXT}
fi

AC_SUBST(BIN_EXEEXT)

AC_PROG_INSTALL

#--------------------------------------------------------------------
# "cygpath" is used on windows to generate native path names for include
# files.
# These variables should only be used with the compiler and linker since
# they generate native path names.
#
# Unix tclConfig.sh points SRC_DIR at the top-level directory of
# the Tcl sources, while the Windows tclConfig.sh points SRC_DIR at
# the win subdirectory.  Hence the different usages of SRC_DIR below.
#
# This must be done before calling SC_PUBLIC_TCL_HEADERS
#--------------------------------------------------------------------

# SC_SET_PLATFORM (??)

case "`uname -s`" in
    *win32* | *WIN32* | *CYGWIN_NT*|*CYGWIN_98*|*CYGWIN_95*)
	CYGPATH="cygpath -w"
    ;;
    *)
	CYGPATH=echo
    ;;
esac

AC_SUBST(CYGPATH)

echo "CYGPATH=${CYGPATH}"
echo "prefix=${prefix}"
PREFIX_NATIVE=`${CYGPATH} ${prefix}`
echo "PREFIX_NATIVE=${PREFIX_NATIVE}"
AC_SUBST(PREFIX_NATIVE)
SRCDIR_NATIVE=`${CYGPATH} ${srcdir}`
AC_SUBST(SRCDIR_NATIVE)

#--------------------------------------------------------------------
# Find tclsh so that we can run pkg_mkIndex to generate the pkgIndex.tcl
# file during the install process.  Don't run the TCLSH through
# ${CYGPATH} because it's being used directly by make.
# Require that we use a tclsh shell version 8.2 or later since earlier
# versions have bugs in the pkg_mkIndex routine.
#--------------------------------------------------------------------

SC_PROG_TCLSH

#--------------------------------------------------------------------
# Only make the /bin/sh wrapper scripts on UNIX
#--------------------------------------------------------------------

case `uname -s` in
    *win32* | *WIN32* | *CYGWIN_NT*|*CYGWIN_98*|*CYGWIN_95*)
	WRAPPER_SCRIPT=
    ;;
    *)
	WRAPPER_SCRIPT=prowrap
    ;;
esac
AC_SUBST(WRAPPER_SCRIPT)

# wrap.sh is a template used to create /bin/sh wrappers around
# the TclPro executables.  We do not need these on Windows,
# and we sometimes use different templates for different
# product lines.

AC_ARG_WITH(wrap-sh, [ --with-wrap-sh=wrap.sh         Template for wrap.sh], WRAP_SH=${withval}, WRAP_SH="wrap.sh")
AC_SUBST(WRAP_SH)

#--------------------------------------------------------------------
# Find TclPro Wrapper.
#--------------------------------------------------------------------

SC_PATH_PROTOOLS

AC_MSG_CHECKING(for bootstrap Wrapper)
AC_ARG_WITH(boot-wrapper, [ --with-boot-wrapper      wrapper executable], with_boot_wrapper=${withval})

if test x"${with_boot_wrapper}" != x ; then
    # Yes, even .exe on Unix - we're bootstrapping here so who cares
    AC_PATH_PROGS(WRAP_U, prowrapUs.exe prowrap14U${EXEEXT} prowrap${EXEEXT}, :, ${wish_boot_wrapper}:${exec_prefix}/bin)
else
   AC_MSG_WARN(boot-wrapper not specified.)
fi

if test "x${WRAP_U}" = "x:" ; then
    AC_MSG_WARN(No bootstrap prowrap executable found.)
fi
AC_SUBST(WRAP_U)

#--------------------------------------------------------------------
# Find TclPro Compiler.
#--------------------------------------------------------------------

AC_PATH_PROGS(PROCOMP, procomp${EXEEXT} procomp0.10${EXEEXT} procomp10${EXEEXT}, :, ${PROTOOLSDIR}/${PLATFORM}/bin:${PATH})

if test "x${PROCOMP}" = "x:" ; then
    AC_MSG_WARN(No procomp executable found.  You will not be able to compile tcl scripts.)
fi
AC_SUBST(PROCOMP)

#--------------------------------------------------------------------
# Check the --enable-symbols option and switch between .tcl and .tbc files.
#--------------------------------------------------------------------

SC_ENABLE_SYMBOLS

if test "${DBGX}x" = "x" ; then
    WRAP_FILES='${WRAP_TBC_FILES}'
    STARTUP_FILE='${STARTUP_TBC}'
else
    WRAP_FILES='${WRAP_TCL_FILES}'
    STARTUP_FILE='${STARTUP_TCL}'
fi
AC_SUBST(WRAP_FILES)
AC_SUBST(STARTUP_FILE)


AC_OUTPUT([Makefile \
	boot83.uses],
	chmod +x ${srcdir}/install-sh ${srcdir}/mkinstalldirs)
