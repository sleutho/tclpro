# This file contains tests for the result.tcl file.
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1998-2000 by Ajuba Solutions
# All rights reserved.
#
# RCS: @(#) $Id: result.test,v 1.3 2001/10/17 19:04:05 andreas_kupries Exp $

if {[string compare test [info procs test]] == 1} {
    lappend auto_path [file join [file dirname [info script]] ..]
    package require protest
    namespace import ::protest::*
}

catch {parse} parseMsg
if {[regexp "invalid command" $parseMsg]} {
    package require parser
}

if {[string compare testGui [info procs testGui]] == 1} {
    source [file join [pwd] [file dirname [info script]] guiLaunch.tcl]
}

test result-1.1 {testing code strings} {
    testGui {
	set y 1
    } {
	gui::run {dbg::step cmdresult}
	waitForApp
	set result [lindex [$result::text get 1.0 end] 1]
    }
} {OK}
test result-1.2 {testing code strings} {
    testGui {
	thisCommandShouldNotExist
    } {
	gui::run {dbg::step cmdresult}
	waitForApp

	# Getting the result is tricky because the stirng may be formatted 
	# thus it appeares to be a badly formed list.  i.e. {bad foo "blah...}
	# To clean it up, just remove all (")
 
	set result [$result::text get 1.0 end]
	regsub -all \" $result {} result
	set result [lindex $result 1]
    }
} {ERROR}
test result-1.3 {testing code strings} {
    testGui {
	while {1} {
	    return
	}
    } {
	gui::run dbg::step
	waitForApp
	gui::run {dbg::step cmdresult}
	waitForApp
	set result [lindex [$result::text get 1.0 end] 1]
    }
} {RETURN}
test result-1.4 {testing code strings} {
    testGui {
	while {1} {
	    break
	}
    } {
	gui::run dbg::step
	waitForApp
	gui::run {dbg::step cmdresult}
	waitForApp
	set result [lindex [$result::text get 1.0 end] 1]
    }
} {BREAK}
test result-1.5 {testing code strings} {
    testGui {
	while {1} {
	    continue
	}
    } {
	gui::run dbg::step
	waitForApp
	gui::run {dbg::step cmdresult}
	waitForApp
	set result [lindex [$result::text get 1.0 end] 1]
    }
} {CONTINUE}

test result-2.1 {testing highlight ranges} {
    testGui {
	set x [expr {1 + 1}]
    } {
	gui::run {dbg::step cmdresult}
	waitForApp
	set result [$code::codeWin tag ranges highlight_cmdresult]
    }
} {2.1 2.21}
test result-2.1 {testing highlight ranges} {
    testGui {
	set x [expr {1 + 1}]
    } {
	gui::run dbg::step
	waitForApp
	gui::run {dbg::step cmdresult}
	waitForApp
	set result [$code::codeWin tag ranges highlight_cmdresult]
    }
} {2.8 2.20}

test result-3.1 {testing where it stops} {
    testGui {
	catch {error foo}
    } {
	gui::run dbg::step
	waitForApp
	gui::run {dbg::step cmdresult}
	waitForApp
	set result [$result::text get 1.0 "end -1c"]
    }
} {Code: ERROR	Result: foo}
test result-3.2 {testing where it stops} {
    testGui {
	catch {error foo}
    } {
	gui::run dbg::step
	waitForApp
	gui::run {dbg::step cmdresult}
	waitForApp
	gui::run {dbg::step cmdresult}
	waitForApp
	set result [$result::text get 1.0 "end -1c"]
    }
} {Code: OK	Result: 1}




cleanupTests

if {[info exists tk_version] && !$tcl_interactive} {
    exit
}
