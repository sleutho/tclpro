# This file contains tests for the varWin.tcl file.
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1998-2000 by Ajuba Solutions
# All rights reserved.
#
# RCS: @(#) $Id: varWin.test,v 1.3 2001/10/17 19:04:06 andreas_kupries Exp $


if {[string compare test [info procs test]] == 1} {
    lappend auto_path [file join [file dirname [info script]] ..]
    package require protest
    namespace import ::protest::*
}

catch {parse} parseMsg
if {[regexp "invalid command" $parseMsg]} {
    package require parser
}

if {[string compare testGui [info procs testGui]] == 1} {
    source [file join [pwd] [file dirname [info script]] guiLaunch.tcl]
}

test varWin-1.1 {test var names} {
    testGui {
	proc x {} {
	    set ""   empty
	    set 2     x
	    set "a\t" aTAB
	    set "a\n z" aNEWLINE-z
	    set a1    a
	    set "a3\0 z" aNULL-z
	    dummy
	}
	x
	exit
    } {
	for {set i 0} {$i < 8} {incr i} {
	    gui::run dbg::step
	    waitForApp
	}
	split [$var::nameText get 1.0 end] "\n"
    }
} {{} 2 {a	} {a\n z} a1 {a3 z} {} {}}
test varWin-1.2 {test var values} {
    testGui {
	proc x {} {
	    set empty ""   
	    set x 2     
	    set aTAB "a\t" 
	    set aNEWLINE-z "a\n z" 
	    set a1 a1    
	    set aNULL-z "a3\0 z" 
	    dummy
	}
	x
	exit
    } {
	for {set i 0} {$i < 8} {incr i} {
	    gui::run dbg::step
	    waitForApp
	}
	split [$var::valuText get 1.0 end] "\n"
    }
} {a1 {a\n z} {a3 z} {a	} {} 2 {} {}}

cleanupTests

if {[info exists tk_version] && !$tcl_interactive} {
    exit
}
