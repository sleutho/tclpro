# uplevel.test --
#
# This file contains tests for the uplevel.pdx debugger extension file.
#
# Copyright (c) 1998-2000 by Ajuba Solutions
# All rights reserved.
#
# RCS: @(#) $Id: uplevel.test,v 1.3 2001/10/17 19:04:06 andreas_kupries Exp $

if {[string compare test [info procs test]] == 1} {
    lappend auto_path [file join [file dirname [info script]] ..]
    package require protest
    namespace import ::protest::*
}

catch {parse} parseMsg
if {[regexp "invalid command" $parseMsg]} {
    package require parser
}

if {[string compare testGui [info procs testGui]] == 1} {
    source [file join $::tcltest::testsDirectory guiLaunch.tcl]
}
source [file join $::tcltest::testsDirectory .. uplevel.pdx]

test uplevel-1.1 {uplevel w/o level w/ 1 literal arg} {
    testGui {
	proc foo {} {
	    uplevel {
		set a 1
		incr a
		incr a
		incr a
		incr a
		incr a
		incr a
		incr a
	    }
	}
	foo
	exit
    } {
	# step into the 7 incr calls
	# if the incr calls were not instrumented, then we'll get an error.
	for {set i 1} {$i <= 9} {incr i} {
	    gui::run dbg::step
	    waitForApp
	}
	# get the 1st value in the list: "a"
	lindex [split [$var::valuText get 1.0 end] "\n"] 0
    }
} 6

test uplevel-1.2 {uplevel w/ level w/ 1 literal arg} {
    testGui {
	proc foo {} {
	    uplevel \#0 {
		set a 1
		incr a
		incr a
		incr a
		incr a
		incr a
		incr a
		incr a
	    }
	}
	foo
	exit
    } {
	# step into the 7 incr calls
	# if the incr calls were not instrumented, then we'll get an error.
	for {set i 1} {$i <= 9} {incr i} {
	    gui::run dbg::step
	    waitForApp
	}
	# get the 1st value in the list: "a"
	lindex [split [$var::valuText get 1.0 end] "\n"] 0
    }
} 6

test uplevel-2.1 {uplevel w/o level w/ 1 non-literal arg} {
    testGui {
	proc foo {} {
	    set script  {
		set a 1
		incr a
		incr a
		incr a
		incr a
		incr a
		incr a
		incr a
	    }
	    uplevel $script
	}
	foo
	exit
    } {
	# only step 4 times, but a=8 because uplevel is not instrumented.
	for {set i 1} {$i <= 4} {incr i} {
	    gui::run dbg::step
	    waitForApp
	}
	# get the 1st value in the list: "a"
	lindex [split [$var::valuText get 1.0 end] "\n"] 0
    }
} 8

test uplevel-2.2 {uplevel w/o level w/ multiple literal args} {
    testGui {
	proc foo {} {
	    uplevel {set a 1} {; incr a} {; incr a} {; incr a} \
		    {; incr a} {; incr a} {; incr a} {; incr a}
	}
	foo
	exit
    } {
	# only step 3 times, but a=8 because uplevel is not instrumented.
	for {set i 1} {$i <= 3} {incr i} {
	    gui::run dbg::step
	    waitForApp
	}
	# get the 1st value in the list: "a"
	lindex [split [$var::valuText get 1.0 end] "\n"] 0
    }
} 8

test uplevel-2.3 {uplevel w/ level w/ multiple literal args} {
    testGui {
	proc foo {} {
	    uplevel 1 {set a 1} {; incr a} {; incr a} {; incr a} \
		    {; incr a} {; incr a} {; incr a} {; incr a}
	}
	foo
	exit
    } {
	# only step 3 times, but a=8 because uplevel is not instrumented.
	for {set i 1} {$i <= 3} {incr i} {
	    gui::run dbg::step
	    waitForApp
	}
	# get the 1st value in the list: "a"
	lindex [split [$var::valuText get 1.0 end] "\n"] 0
    }
} 8

cleanupTests

if {[info exists tk_version] && !$tcl_interactive} {
    exit
}
