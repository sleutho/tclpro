# This file contains tests for the dbg.tcl file.
#
# This file contains a collection of tests for one or more of the Tcl
# built-in commands.  Sourcing this file into Tcl runs the tests and
# generates output for errors.  No output means no errors were found.
#
# Copyright (c) 1998-2000 by Ajuba Solutions
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: dbg.test,v 1.4 2001/10/17 19:04:05 andreas_kupries Exp $

if {[string compare test [info procs test]] == 1} {
    lappend auto_path [file join [file dirname [info script]] ..]
    package require protest
    namespace import ::protest::*
}

catch {parse} parseMsg
if {[regexp "invalid command" $parseMsg]} {
    package require tparser
}

if {[string compare testGui [info procs launchDbg]] == 1} {
    source [file join [pwd] [file dirname [info script]] dbgLaunch.tcl]
}

test dbg-1.1 {dbg::getStack, simple statement} {
    testDbg {set x 1} {
	dbg::getStack
    }
} {{0 {} global} {0 {1 1 {0 8}} source dummy.tcl}}
test dbg-1.2 {dbg::getStack, multiple statements per line} {
    testDbg {set x 1; set y 1} {
	set result [list [dbg::getStack]]
	dbg::step
	waitForApp
	lappend result [dbg::getStack]
    }
} {{{0 {} global} {0 {1 1 {0 8}} source dummy.tcl}} {{0 {} global} {0 {1 1 {9 8}} source dummy.tcl}}}
test dbg-1.3 {dbg::getStack, multiple statements, multiple lines} {
    testDbg "set x 1\nset y 1" {
	set result [list [dbg::getStack]]
	dbg::step
	waitForApp
	lappend result [dbg::getStack]
    }
} {{{0 {} global} {0 {1 1 {0 8}} source dummy.tcl}} {{0 {} global} {0 {1 2 {8 8}} source dummy.tcl}}}
test dbg-1.4 {dbg::getStack, simple procedure invocation} {
    testDbg {proc foo {} {
	set x 1
    }
    foo} {
	set result [list [dbg::getStack]]
	dbg::step
	waitForApp
	lappend result [dbg::getStack]
	dbg::step
	waitForApp
	lappend result [dbg::getStack]
    }
} {{{0 {} global} {0 {1 1 {0 29}} source dummy.tcl}} {{0 {} global} {0 {1 4 {33 4}} source dummy.tcl}} {{0 {} global} {0 {1 4 {33 4}} source dummy.tcl} {1 {1 2 {15 8}} proc ::foo {}}}}
test dbg-1.5 {dbg::getStack, uninstrumented frame} {
    testDbg {proc foo {} {
	set x 1
    }
    bar} {
	dbg::Send DbgNub_procCmd bar {} {foo}
	dbg::step; waitForApp
	dbg::step; waitForApp
	set result [dbg::getStack]
    }
} {{0 {} global} {0 {1 4 {33 4}} source dummy.tcl} {1 {} proc ::bar {}} {2 {1 2 {15 8}} proc ::foo {}}}
test dbg-1.6 {dbg::getStack, uplevel frame} {
    testDbg {proc foo {} {
	uplevel bar
    }
    proc bar {} {
	set x 1
    }
    foo} {
	dbg::addLineBreakpoint {1 5 {}}
	dbg::run; waitForApp
	set result [dbg::getStack]
    }
} {{0 {} global} {0 {1 7 {70 4}} source dummy.tcl} {1 {1 2 {15 12}} proc ::foo {}} {0 {} uplevel} {1 {1 5 {52 8}} proc ::bar {}}}
test dbg-1.7 {dbg::getStack, event frame} {
    testDbg {proc foo {} {
	global x
	set x 1
    }
    proc bar {} {
	global x
	after 1000 foo
	set q 1
	vwait x
    }
    bar} {
	dbg::addLineBreakpoint {1 2 {}}
	dbg::run; waitForApp
	set result [dbg::getStack]
	dbg::run
	set result
    }
} {{0 {} global} {0 {1 11 {111 4}} source dummy.tcl} {1 {1 9 {93 8}} proc ::bar {}} {0 {1 7 {79 3}} event} {1 {1 2 {15 9}} proc ::foo {}}}
test dbg-1.8 {dbg::getStack, while frame} {
    testDbg {proc foo {} {
	set x 1
	while {$x < 3} {
	    incr x
	}
    }
    foo} {
	dbg::addLineBreakpoint {1 4 {}}
	dbg::run; waitForApp
	set result [dbg::getStack]
    }
} {{0 {} global} {0 {1 7 {66 4}} source dummy.tcl} {1 {1 4 {46 7}} proc ::foo {}}}
test dbg-1.9 {dbg::getStack, source frame} {
    set dummy2 [file join $::tcltest::temporaryDirectory dummy2.tcl]
    makeFile {set x 1
    set x 2} $dummy2
    testDbg {proc foo {} {
	source dummy2.tcl
    }
    foo} {
	dbg::addLineBreakpoint {2 1 {}}
	dbg::run; waitForApp
	dbg::getStack
    }
} {{0 {} global} {0 {1 4 {43 4}} source dummy.tcl} {1 {1 2 {15 18}} proc ::foo {}} {1 {2 1 {0 8}} source dummy2.tcl}}
test dbg-1.10 {dbg::getStack, source frame called from uninstrumented proc} {
    set dummy2 [file join $::tcltest::temporaryDirectory dummy2.tcl]
    makeFile {set x 1
    set x 2} $dummy2
    testDbg {foo} {
	dbg::Send DbgNub_procCmd foo {} {
	    source dummy2.tcl
	}
	dbg::addLineBreakpoint {2 1 {}}
	dbg::run; waitForApp
	dbg::getStack
    }
} {{0 {} global} {0 {1 1 {0 4}} source dummy.tcl} {1 {} proc ::foo {}} {1 {2 1 {0 8}} source dummy2.tcl}}

catch {dbg::quit}

test dbg-2.1 {dbg::getProcBody, simple braced body} {
    set b [blk::makeBlock {}]
    blk::SetSource $b "proc foo args {
	set x bar\\ bob
    }"
    set loc [loc::makeLocation $b 0 {}]
    set result [dbg::getProcBody $loc]
    blk::release $b
    set result
} {
	set x bar\ bob
    }
test dbg-2.2 {dbg::getProcBody, braced body with continuation lines} {
    set b [blk::makeBlock {}]
    blk::SetSource $b "proc foo args {
	set x \\
	    bar\\ bob
    }"
    set loc [loc::makeLocation $b 0 {}]
    set result [dbg::getProcBody $loc]
    blk::release $b
    set result
} {
	set x  bar\ bob
    }

if {[string compare testGui [info procs testGui]] == 1} {
    source [file join [pwd] [file dirname [info script]] guiLaunch.tcl]
}

proc bpsToLines {bpList} {
    set result {}
    foreach bp $bpList {
	set loc [break::getLocation $bp]
	set blk [loc::getBlock $loc]
	set line [loc::getLine $loc]
	lappend result $line
    }
    return $result
}

test dbg-3.1 {validating/moving line breakpoints} {
    testGui {# comment 1
	set x 2
	set x 3
        # comment 4
        # comment 5
        # comment 6
        set x 7
        set x 8
        # comment 9
    } {
	gui::run dbg::step
	waitForApp
	set result [lsort [bpsToLines [dbg::getLineBreakpoints]]]
    } {
	code::toggleLBP $code::codeBar 1.0 onoff
	code::toggleLBP $code::codeBar 5.0 onoff
	code::toggleLBP $code::codeBar 6.0 onoff
	code::toggleLBP $code::codeBar 9.0 onoff
    }
} {2 3 7 8}

test dbg-3.2 {validating/moving line breakpoints in another block} {
    makeFile {# comment 1
	# comment 2
	# comment 3
	set x 4
    } block2.tcl
    
    set absfile [file join $::tcltest::temporaryDirectory block2.tcl]
    
    testGui [list source $absfile] {
	# open the block2.tcl file & add a bp on the 1st line
	set block [blk::makeBlock $absfile]
	set loc [loc::makeLocation $block {}]
	gui::showCode $loc
	code::toggleLBP $code::codeBar 1.0 onoff

	gui::run dbg::run
	waitForApp
	set result [lsort [bpsToLines [dbg::getLineBreakpoints]]]
    }
} {4}

cleanupTests

if {[info exists tk_version] && !$tcl_interactive} {
    exit
}
