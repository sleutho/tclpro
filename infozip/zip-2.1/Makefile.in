# Makefile.in --
#
#	This file is a Makefile for Sample TEA Extension.  If it has the name
#	"Makefile.in" then it is a template for a Makefile;  to generate the
#	actual Makefile, run "./configure", which is a configuration script
#	generated by the "autoconf" program (constructs like "@foo@" will get
#	replaced in the actual Makefile.
#
# Copyright (c) 1999 Scriptics Corporation.
#
# See the file "license.terms" for information on usage and redistribution
# of this file, and for a DISCLAIMER OF ALL WARRANTIES.
#
# RCS: @(#) $Id: Makefile.in,v 1.4 2000/07/14 17:11:44 welch Exp $

#========================================================================
# Edit the following few lines when writing a new extension
#========================================================================

#========================================================================
# Change the name of the variable "exampleA_LIB_FILE" to match the one
# used in the configure script.  This is the parameterized name of the
# library that we are building.
#========================================================================
PWUTILVER=10
PWUTIL = pwutil$(PWUTILVER)$(EXEEXT)
bin_BINARIES=$(PWUTIL)
BINARIES=$(PWUTIL)



#========================================================================
# Enumerate the names of the source files included in this package.
# This will be used when a dist target is added to the Makefile.
#========================================================================


zip_SOURCES = zip.c crypt.c ttyio.c zipfile.c zipup.c fileio.c \
	util.c crc32.c crctab.c globals.c deflate.c trees.c \
	bits.c $(PLATFORM_SOURCES)

SOURCES = $(zip_SOURCES)

#========================================================================
# Enumerate the names of the object files included in this package.
# These objects are created and linked into the final library.  In
# most cases these object files will correspond to the source files
# above.
#
#========================================================================

zip_OBJECTS = zip.$(OBJEXT) crypt.$(OBJEXT) ttyio.$(OBJEXT) \
	zipfile.$(OBJEXT) zipup.$(OBJEXT) fileio.$(OBJEXT) \
	util.$(OBJEXT) crc32.$(OBJEXT) crctab.$(OBJEXT) \
	globals.$(OBJEXT) deflate.$(OBJEXT) trees.$(OBJEXT) \
	bits.$(OBJEXT) $(PLATFORM_OBJS)

OBJECTS = $(zip_OBJECTS)

#========================================================================
# The substitution of "exampleA_LIB_FILE" into the variable name below
# allows us to refer to the objects for the library without knowing the name
# of the library in advance.  It also lets us use the "$@" variable in
# the rule for building the library, so we can refer to both the list of 
# objects and the library itself in a platform-independent manner.
#========================================================================

zip_LIB_FILE = @zip_LIB_FILE@
$(zip_LIB_FILE)_OBJECTS = $(zip_OBJECTS)

#========================================================================
# This is a list of header files to be installed
#========================================================================

GENERIC_HDRS= 

#========================================================================
# Add additional lines to handle any additional AC_SUBST cases that
# have been added to the configure script.
#========================================================================

## SAMPLE_NEW_VAR=@SAMPLE_NEW_VAR@

ZIP_INCLUDE_DIR          = @ZIP_INCLUDE_DIR@
ZIP_INCLUDE_DIR_NATIVE   = @ZIP_INCLUDE_DIR_NATIVE@
ZIP_EXTRA_INCLUDE        = @ZIP_EXTRA_INCLUDE@
ZIP_EXTRA_INCLUDE_NATIVE = @ZIP_EXTRA_INCLUDE_NATIVE@
ZIP_INCLUDES             = @ZIP_INCLUDES@
PLATFORM_OBJS            = @PLATFORM_OBJS@
PLATFORM_SOURCES         = @PLATFORM_SOURCES@

#========================================================================
# Nothing of the variables below this line need to be changed.  Please
# check the TARGETS section below to make sure the make targets are
# correct.
#========================================================================

SHELL = @SHELL@

srcdir = @srcdir@
top_srcdir = @top_srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

DESTDIR =

pkgdatadir = $(datadir)/@PACKAGE@@VERSION@
pkglibdir = $(libdir)/@PACKAGE@@VERSION@
pkgincludedir = $(includedir)/@PACKAGE@@VERSION@

top_builddir = .

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
INSTALL_STRIP_FLAG =
transform = @program_transform_name@

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :

PACKAGE = @PACKAGE@
VERSION = @VERSION@
CC = @CC@
CFLAGS_DEBUG = @CFLAGS_DEBUG@
CFLAGS_DEFAULT = @CFLAGS_DEFAULT@
CFLAGS_OPTIMIZE = @CFLAGS_OPTIMIZE@
CLEANFILES = @CLEANFILES@
EXEEXT = @EXEEXT@
LDFLAGS_DEBUG = @LDFLAGS_DEBUG@
LDFLAGS_DEFAULT = @LDFLAGS_DEFAULT@
LDFLAGS_OPTIMIZE = @LDFLAGS_OPTIMIZE@
MAKE_LIB = @MAKE_LIB@
MAKE_SHARED_LIB = @MAKE_SHARED_LIB@
MAKE_STATIC_LIB = @MAKE_STATIC_LIB@
OBJEXT = @OBJEXT@
PACKAGE_CFLAGS = @PACKAGE_CFLAGS@
RANLIB = @RANLIB@
SHLIB_CFLAGS = @SHLIB_CFLAGS@
SHLIB_LD = @SHLIB_LD@
SHLIB_LDFLAGS = @SHLIB_LDFLAGS@
SHLIB_LD_LIBS = @SHLIB_LD_LIBS@
STLIB_LD = @STLIB_LD@
INCLUDE_DIR_NATIVE = @INCLUDE_DIR_NATIVE@
SHARED_BUILD = @SHARED_BUILD@
TCL_EXTRA_CLFAGS = @TCL_EXTRA_CLFAGS@
TCL_LD_LFAGS = @TCL_LD_LFAGS@

AUTOCONF = autoconf

LDFLAGS = $(LDFLAGS_DEFAULT)

INCLUDES = -I. $(ZIP_INCLUDES)

EXTRA_CFLAGS = $(PROTO_FLAGS) $(SECURITY_FLAGS) $(MEM_DEBUG_FLAGS) $(KEYSYM_FLAGS) $(NO_DEPRECATED_FLAGS) $(PACKAGE_CFLAGS)

DEFS = @DEFS@ $(EXTRA_CFLAGS) $(TCL_EXTRA_CFLAGS)

ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_CLEAN_FILES = mkIndex.tcl

CPPFLAGS = @CPPFLAGS@
LIBS = @LIBS@
AR = ar
CFLAGS = @CFLAGS@
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(LDFLAGS) $(TCL_LD_FLAGS) -o $@

#========================================================================
# Start of user-definable TARGETS section
#========================================================================

#========================================================================
# TEA TARGETS.  Please note that the "libraries:" target refers to platform
# independent files, and the "binaries:" target inclues executable programs and
# platform-dependent libraries.  Modify these targets so that they install
# the various pieces of your package.  The make and install rules
# for the BINARIES that you specified above have already been done.
#========================================================================

all: binaries libraries 

#========================================================================
# The binaries target builds executable programs, Windows .dll's, unix
# shared/static libraries, and any other platform-dependent files.
# The list of targets to build for "binaries:" is specified at the top
# of the Makefile, in the "BINARIES" variable.
#========================================================================

binaries: $(BINARIES)

libraries:

install: all install-binaries install-libraries 

install-binaries: binaries install-lib-binaries install-bin-binaries
##	$(TCLSH_PROG) mkIndex.tcl $(_LIB_FILE)
##	if test "x$(SHARED_BUILD)" = "x1"; then \
##	    $(TCLSH_PROG) mkIndex.tcl $(exampleA_LIB_FILE); \
##	fi

#========================================================================
# This rule installs platform-independent files, such as header files.
#========================================================================

install-libraries: libraries

test:

depend:

#========================================================================
# Build the pwutil executable
#========================================================================

$(PWUTIL): $(zip_OBJECTS)
	$(CC) $(CFLAGS) -o $(PWUTIL) $(zip_OBJECTS)

#========================================================================
# We need to enumerate the list of .c to .o lines here.
# Unfortunately, there does not seem to be any other way to do this
# in a Makefile-independent way.  We can't use VPATH because it picks up
# object files that may be located in the source directory.
#
# In the following lines, $(srcdir) refers to the toplevel directory
# containing your extension.  If your sources are in a subdirectory,
# you will have to modify the paths to reflect this:
#
# exampleA.$(OBJEXT): $(srcdir)/src/win/exampleA.c
# 	$(COMPILE) -c `@CYGPATH@ $(srcdir)/src/win/exampleA.c` -o $@
#========================================================================

zip.$(OBJEXT): $(srcdir)/zip.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/zip.c` -o $@

crypt.$(OBJEXT): $(srcdir)/crypt.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/crypt.c` -o $@

ttyio.$(OBJEXT): $(srcdir)/ttyio.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/ttyio.c` -o $@

zipfile.$(OBJEXT): $(srcdir)/zipfile.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/zipfile.c` -o $@

zipup.$(OBJEXT): $(srcdir)/zipup.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/zipup.c` -o $@

fileio.$(OBJEXT): $(srcdir)/fileio.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/fileio.c` -o $@

util.$(OBJEXT): $(srcdir)/util.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/util.c` -o $@

crc32.$(OBJEXT): $(srcdir)/crc32.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/crc32.c` -o $@

crctab.$(OBJEXT): $(srcdir)/crctab.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/crctab.c` -o $@

globals.$(OBJEXT): $(srcdir)/globals.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/globals.c` -o $@

deflate.$(OBJEXT): $(srcdir)/deflate.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/deflate.c` -o $@

trees.$(OBJEXT): $(srcdir)/trees.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/trees.c` -o $@

bits.$(OBJEXT): $(srcdir)/bits.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/bits.c` -o $@

win32.$(OBJEXT): $(srcdir)/win32/win32.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/win32/win32.c` -o $@

win32zip.$(OBJEXT): $(srcdir)/win32/win32zip.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/win32/win32zip.c` -o $@

unix.$(OBJEXT): $(srcdir)/unix/unix.c
	$(COMPILE) -c `@CYGPATH@ $(srcdir)/unix/unix.c` -o $@


#========================================================================
# End of user-definable section
#========================================================================

#========================================================================
# Don't modify the file to clean here.  Instead, set the "CLEANFILES"
# variable in configure.in
#========================================================================

clean:  
	-test -z "$(BINARIES)" || rm -f $(BINARIES)
	-rm -f *.o core *.core
	-rm -f *.$(OBJEXT)
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean: clean
	-rm -f *.tab.c
	-rm -f Makefile $(CONFIG_CLEAN_FILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*
	-rm -f config.status

#========================================================================
# Install binary object libraries.  On Windows this includes both .dll and
# .lib files.  Because the .lib files are not explicitly listed anywhere,
# we need to deduce their existence from the .dll file of the same name.
# Additionally, the .dll files go into the bin directory, but the .lib
# files go into the lib directory.  On Unix platforms, all library files
# go into the lib directory.  In addition, this will generate the pkgIndex.tcl
# file in the install location (assuming it can find a usable tclsh8.2 shell)
#
# You should not have to modify this target.
#========================================================================

install-lib-binaries: installdirs
	@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    ext=`echo $$p|sed -e "s/.*\.//"`; \
	    if test "x$$ext" = "xdll"; then \
	        echo " $(INSTALL_DATA) $$p $(DESTDIR)$(bindir)/$$p"; \
	        $(INSTALL_DATA) $$p $(DESTDIR)$(bindir)/$$p; \
		lib=`basename $$p|sed -e 's/.[^.]*$$//'`.lib; \
		if test -f $$lib; then \
		    echo " $(INSTALL_DATA) $$lib $(DESTDIR)$(libdir)/$$lib"; \
	            $(INSTALL_DATA) $$lib $(DESTDIR)$(libdir)/$$lib; \
		fi; \
	    else \
		echo " $(INSTALL_DATA) $$p $(DESTDIR)$(libdir)/$$p"; \
	        $(INSTALL_DATA) $$p $(DESTDIR)$(libdir)/$$p; \
	    fi; \
	  else :; fi; \
	done
	@list='$(lib_BINARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(RANLIB) $(DESTDIR)$(libdir)/$$p"; \
	    $(RANLIB) $(DESTDIR)$(libdir)/$$p; \
	  else :; fi; \
	done

#========================================================================
# Install binary executables (e.g. .exe files)
#
# You should not have to modify this target.
#========================================================================

install-bin-binaries: installdirs
	@echo Installing binaries $(bin_BINARIES).
	@list='$(bin_BINARIES)'; for p in $$list; do \
	  echo "  checking $$p" ; \
	  if test -f $$p; then \
	    echo " $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p"; \
	    $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/$$p; \
	  else :; fi; \
	done

.SUFFIXES: .c .o .obj

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) \
	  && CONFIG_FILES=$@ CONFIG_HEADERS= $(SHELL) ./config.status

uninstall-binaries:
	@$(NORMAL_UNINSTALL)
	list='$(BINARIES)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(libdir)/$$p; \
	done

installdirs:
	$(mkinstalldirs)  $(DESTDIR)$(libdir)
	$(mkinstalldirs)  $(DESTDIR)$(bindir)
	$(mkinstalldirs)  $(DESTDIR)$(pkglibdir)

.PHONY: all binaries clean depend distclean install installdirs \
libraries test

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
