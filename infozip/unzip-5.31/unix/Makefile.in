#
# Example 41-13
# The Makefile.in template.
#

# The following definitions create Makefile variables
# that get values from autoconf variables.

CC			= @CC@
DEFS			= @DEFS@ @TCL_DEFS@
SHLIB_CFLAGS		= @TCL_SHLIB_CFLAGS@
SHLIB_LD		= @TCL_SHLIB_LD@
SHLIB_LD_LIBS		= @TCL_SHLIB_LD_LIBS@
SHLIB_SUFFIX		= @TCL_SHLIB_SUFFIX@
SRC_DIR			= @srcdir@
TCL_INCLUDE_DIR		= @TCL_INCLUDE_DIR@
X11_INCLUDES		= @TK_XINCLUDES@

UNZIP_SRCDIR		= @srcdir@/..

UNZIPLIB		= libunzip31$(DBGX).a
ZIPPROG			= @srcdir@/../zip/zip

UNZIP_UNIX_OBJS		= unix.o
UNZIP_OBJS		= unzip.o crc32.o crctab.o crypt.o \
			  envargs.o explode.o extract.o \
			  fileio.o globals.o inflate.o \
			  list.o match.o process.o \
			  ttyio.o unreduce.o unshrink.o \
			  zipinfo.o api.o

# Libraries built with optimization switches have this additional extension
DBGX =			@DBGX@

# The default switches for optimization or debugging
CFLAGS_DEBUG =		@CFLAGS_DEBUG@
CFLAGS_OPTIMIZE =	@CFLAGS_OPTIMIZE@

# To change the compiler switches, for example to change from optimization to
# debugging symbols, change the following line:
#CFLAGS = 		$(CFLAGS_DEBUG)
#CFLAGS = 		$(CFLAGS_OPTIMIZE)
#CFLAGS = 		$(CFLAGS_DEBUG) $(CFLAGS_OPTIMIZE)
CFLAGS = 		$(@CFLAGS_DEFAULT@)

CC_SWITCHES = ${X11_INCLUDE}
CCFLAGS = $(CFLAGS) $(CC_SWITCHES) -I${UNZIP_SRCDIR} \
	$(DEFS) -I${SRC_DIR} -I${TCL_INCLUDE_DIR}

all:	${UNZIPLIB}

${UNZIPLIB}: ${UNZIP_OBJS} ${UNZIP_UNIX_OBJS}
	rm -f $@
	${AR} cr $@ ${UNZIP_OBJS} ${UNZIP_UNIX_OBJS}

${UNZIP_OBJS}:
	$(CC) $(CCFLAGS) -c -DUZPFILETREE2 -DDLL -DNO_ZIPINFO \
		${UNZIP_SRCDIR}/$*.c

${UNZIP_UNIX_OBJS}:
	$(CC) $(CCFLAGS) -c -DUZPFILETREE2 -DDLL -DNO_ZIPINFO \
		${UNZIP_SRCDIR}/unix/$*.c

${ZIPPROG}:
	(cd @srcdir@/../zip; \
	  $(MAKE) -f unix/Makefile generic_gcc; \
	 cd @srcdir@)

clean:
	rm -f *.o config.cache config.log \
		config.status ${UNZIPLIB}

distclean: clean
	rm -f Makefile
