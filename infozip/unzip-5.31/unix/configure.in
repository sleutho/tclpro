#
# configure.in -- Configure template for building the unzip library.
# 
# Copyright (c) 1998 by Scriptics Corporation. 
# 
# See the file "license.terms" for information on usage and redistribution 
# of this file, and for a DISCLAIMER OF ALL WARRANTIES. 
# 
# RCS: @(#) $Id: configure.in,v 1.1 1998/07/07 21:48:25 escoffon Exp $

# Name a file autoconf should find in the source directory
AC_INIT(../unix/unix.c)

# See if there was a command-line option for where Tcl is; if
# not, assume that its top-level directory is a sibling of ours.
AC_ARG_WITH(tcl, 
	[  --with-tcl=DIR use Tcl 8.0 binaries from DIR],
	TCL_BIN_DIR=$withval,
	TCL_BIN_DIR=`cd $srcdir/../../../tcl8.0/unix; pwd`)
if test ! -d $TCL_BIN_DIR; then
    AC_MSG_ERROR(Tcl directory $TCL_BIN_DIR doesn't exist)
fi

# Determine signal handler return type
AC_TYPE_SIGNAL()
AC_CHECK_FUNC(siginterrupt, AC_DEFINE(HAVE_SIGINTERRUPT) ,)

# Use the information from the Tcl configuration

. $TCL_BIN_DIR/tclConfig.sh

#CC=$TCL_CC
#AC_SUBST(CC)
AC_PROG_RANLIB
AC_ARG_ENABLE(gcc, [  --enable-gcc            allow use of gcc if available],
    [tcl_ok=$enableval], [tcl_ok=no])
if test "$tcl_ok" = "yes"; then
    AC_PROG_CC
else
    CC=${CC-cc}
AC_SUBST(CC)
fi

# Set the default compiler switches based on the --enable-symbols option

AC_ARG_ENABLE(symbols, [  --enable-symbols        build with debugging symbols],
    [tcl_ok=$enableval], [tcl_ok=no])
if test "$tcl_ok" = "yes"; then
    CFLAGS_DEFAULT=CFLAGS_DEBUG
    DBGX=g
else
    CFLAGS_DEFAULT=CFLAGS_OPTIMIZE
    DBGX=""
fi

CFLAGS_DEBUG=$TCL_CFLAGS_DEBUG
CFLAGS_OPTIMIZE=$TCL_CFLAGS_OPTIMIZE

# Expand @references@ to autoconf variables in Makefile.in

AC_SUBST(CFLAGS_DEBUG)
AC_SUBST(CFLAGS_DEFAULT)
AC_SUBST(CFLAGS_OPTIMIZE)
AC_SUBST(DBGX)

AC_SUBST(TCL_SHLIB_CFLAGS)
AC_SUBST(TCL_SHLIB_LD)
AC_SUBST(TCL_SHLIB_LD_LIBS)
AC_SUBST(TCL_SHLIB_SUFFIX)

AC_SUBST(TCL_BUILD_LIB_SPEC)
AC_SUBST(TCL_DEFS)
AC_SUBST(TCL_LIBS)
AC_SUBST(TCL_PREFIX)

TCL_INCLUDE_DIR=$TCL_SRC_DIR/generic
AC_SUBST(TCL_INCLUDE_DIR)

AC_OUTPUT(Makefile)
